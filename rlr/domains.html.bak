<html>
<head>
<title>Reinforcement Learning Repository at UMass, Amherst</title>
</head>
<body bgcolor="FFFFBB">
<h3>Reinforcement Learning Repository at UMass, Amherst</h3>
<h2>Demos and Implementation (Domains)</h2>
<p>This section contains programs which demonstrate
reinforcement learning in action, as an illustration of the concepts and 
common algorithms.  These programs might provide a useful
starting place for the implementation of reinforcement learning to solve
real
problems and advance research in this area.  Wherever possible, source
code is included.  
<p>Please note that use of this software is <b>restricted</b>; you must
read this <a href=legal.html>license agreement</a> and agree to its terms
before downloading any
software from this site.  Downloading the software is considered consent
to the terms.

<p>If you would like to contribute source code or make 
suggestions for
improvement of what is included here, contact <!-- to <a
href=mailto:hernan49@cse.msu.edu>Natalia Hernandez</a> or --><a
href=mailto:mahadeva@cs.umass.edu>Sridhar Mahadevan</a>. <br><br>
<hr>
<img align=right border=2 src=imgs/cartpole-sm.gif>
<li><b>Cart-Pole Problem</b><br>
Simulation of the cart and pole dynamic
system and 
 a procedure for learning to balance the pole.  Both are described in 
 Barto, Sutton, and Anderson, "<i>Neuronlike Adaptive Elements That Can
Solve
 Difficult Learning Control Problems," IEEE Trans. Syst., Man, Cybern.,
 Vol. SMC-13, pp. 834--846, Sept.--Oct. 1983</i> Written by Rich Sutton.

<br>
Source code: <a
href=distcode/cpole.tar>cpole.tar</a>
(16 K, requires C compiler)
<br><hr>

<li><b>Cell Phone</b><br>
Interactive Java demonstration illustrating the
improvement
gained by applying RL to the problem of <a
href=http://envy.cs.umass.edu/People/singh/Demo.html>Dynamic Channel
Allocation in Cellular Telephones</a>, by Satinder Singh at the University
of Colorado
<hr>
<img align=right border=2 src=imgs/offbl1.gif>

<li><b>Elevator</b><br>
Fortran simulation of an elevator, written by James Lewis, and provided by
Christos Cassandras at UMASS ECE Dept.  The reinforcement learning
addition to the elevator simulation was implemented by Bob Crites, CS
Dept. UMass. and John McNulty<br> and is described in the paper
<a
href=http://envy.cs.umass.edu/cgi-bin/getfile/pub/anw/pub/crites/nips8.ps.Z> 
Improving
Elevator Performance Using Reinforcement Learning</a>. 
Source code: <a
href=distcode/elevator.tar.gz>elevator.tar.gz</a>
(284 K) or 
<a href=distcode/elevator.tar>elevator.tar</a>
(814
K).  Both require a C compiler and the <a
href=http://www.netlib.org/f2c/>f2c library</a>
to convert Fortran to c, as it incorporates c random number handling
routines). <br>
<hr>

<li><b>Grid World</b>
This program is a simulation of learning the goal of moving to a
user-defined square of a grid.  It uses Q-learning, and was written by
Sridhar Mahadevan. <br>
Source code:<a
href=distcode/grid.tar>grid.tar</a> (72 K;
requires C compiler and X11 libraries)
<br>
<hr>
<img align=right border=2 src=imgs/prod-sys-sm.jpg>

<li><b>Machine Maintenance</b><br>
CSIM simulation of a production system which integrates SMART, a
model-free average-reward algorithm, to determine the optimal machine
maintenance policy.  It was written by Nicholas Marchalleck and Abhijit
Gosavi, and is described in <a
href=http://www.cs.umass.edu/~mahadeva/papers/mlc97.ps.gz>Self-Improving 
Factory Simulation using Continuous-Time Average-Reward Reinforcement 
Learning</a> by Mahadevan et. al.<br> 
Source code: <a
href=distcode/maint.tar>maint.tar</a>
(268 K; requires <a href=http://www.mesquite.com>CSIM</a> v.17 and C++ 
compiler)<hr>

<li><b>MDP Q-learning</b>: implements Q-learning on a given MDP, using
semi-uniform exploration. <br>
Source code: <a
href=distcode/mdp-q.tar>mdp-q.tar</a>
(64 K, requires GNU C compiler) 
<hr>

<li><b>Mountain-Car Problem</b>: <br>
<img align=right border=2 src=imgs/carhill-sm.gif>
Simulation of a car learning the proper acceleration to get up a mountain.
It uses Q-learning with CMAC as a function approximator.  It is described 
in (among other papers) <a
href=ftp://ftp.cs.umass.edu/pub/anw/pub/sutton/sutton-96.ps.gz>Generalization
in Reinforcement Learning: Successful Examples Using Sparse Coarse
Coding</a> by Rich Sutton, and was developed by Sridhar
Mahadevan.  <br>
Source code: <a
href=distcode/mcar.tar>mcar.tar</a>
(157K; requires X11 libraries and C++ compiler)<br>
<hr>

<li><b>Network Routing</b>: Demonstrates a RL network-routing algorithm
written by Justin Boyan and Michael Littman.   Described in 
<A HREF=http://www.cs.duke.edu/~mlittman/docs/routing-nips.ps>
Packet Routing in Dynamically Changing Networks: A Reinforcement
Learning Approach</A><BR> <i>Advances in
 Neural Information Processing Systems</i> (Postscript - 155KB)<br>
Source code: <a href= 
distcode/network-router.tar>network-router.tar</a> 
(222 K); requires C compiler, <a href=ftp://ftp.smli.com/pub/tcl/tcl7.6.tar.gz>
wish windowing shell (part of Tcl)</a>
<hr>

<li><b>Proposed Standard for Reinforcement Learning Software</b>
<img align=right border=2 src=imgs/help.gif>
This <a
href=http://www-anw.cs.umass.edu/~rich/RLinterface/RLinterface.html>standard</a>,
developed by Rich Sutton and Juan Carlos Santamaria, is intended to
facilitate RL research and development, and is available for C++ and
Common Lisp.

</ul>
