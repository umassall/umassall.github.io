


cc(1)                     User Commands                     cc(1)



NAME
     cc - C compiler

SYNOPSIS
     cc [ -# ] [ -### ] [ -A_n_a_m_e [(_t_o_k_e_n_s) ] ]
     [ -B [static|dynamic] ] [ -C ] [ -c ] [ -D_n_a_m_e [=_t_o_k_e_n_s ] ]
     [ -d [y|n] ] [ -dalign ] [ -E ] [ -erroff=_t ] [ -errtags=_a ]
     [ -fast ] [ -fd ] [ -flags ] [ -fnonstd ] [ -fns ]
     [ -fprecision=_p ] [ -fround=_r ] [ -fsimple[=_n] ] [ - fsingle
     ]
     [ -fstore ] [ -ftrap=t ] [ -G ] [ -g ] [ -H ]
     [ -h _n_a_m_e ] [ -I_d_i_r ] [ -i ] [ -keeptmp ] [ -KPIC ]
     [ -Kpic ] [ -L_d_i_r ] [ -l_n_a_m_e ] [ -mc ] [ -misalign ]
     [ -misalign2 ] [ -mr ] [ -mr,_s_t_r_i_n_g ] [ -mt ] [ -native ]
     [ -nofstore ] [ -noqueue ] [ -O ] [ -o _f_i_l_e_n_a_m_e ] [ -P ]
     [ -p ] [ -Q [_yyyy|_nnnn] ] [ -qp ] [ -R_d_i_r[:_d_i_r] ] [ -S ] [ -s ]
     [ -U_n_a_m_e ] [ -V ] [ -v ] [ -W_c,_a_r_g ] [ -w ]
     [ -X [_a |_c |_s |_t ]] [ -x386 ] [ -x486 ] [ -xa ] [ -xarch=_a ]
     [ -xautopar ] [ -xcache=_c ]
     [ -xCC ] [ -xcg89 ] [ -xcg92 ] [ -xchip=_c ] [ -xcrossfile  ]
     [ -xdepend ]
     [ -xe ] [ -xexplicitpar ] [ -xF ] [ -xhelp=_f ]
     [ -xildoff ] [ -xildon ] [ -xinline=[_f_1,...,_f_n] ]
     [ -xlibmieee ] [ -xlibmil ] [ -xlic_lib_=_l ] [ -xlicinfo ]
     [ -xloopinfo ]
     [ -xM ] [ -xM1 ] [ -xMerge ] [ -xnolib ] [ -xnolibmil ]
     [ -xO[1|2|3|4|5] ] [ -xP ] [ -xparallel ] [ -xpentium ]
     [ -xpg ] [ -xprofile=_p ] [ -xreduction ] [ -xregs=_r ]
     [ -xrestrict=_f ] [ -xs ]
     [ -xsafe=mem ] [ -xsb ] [ -xsbfast ] [ -xsfpconst ]
     [ -xspace ] [ -xstrconst ] [ -xtarget=_t ] [ -xtemp=_d_i_r ]
     [ -xtime ] [ -xtransition ] [ -xunroll =_n ] [ -xvpara ]
     [ -Y_c,_d_i_r ] [ -YA,_d_i_r ] [ -YI,_d_i_r ] [ -YP,_d_i_r ] [ -YS,_d_i_r  ]
     [ -Zll ] [ -Zlp ] [ -Ztha ]

DESCRIPTION
     The cc(1) manual page describes the ANSI C compiler  options
     that are SVID compliant under Solaris 2._x. _cccc_cccc uses _gggg_eeee_tttt_oooo_pppp_tttt to
     parse command-line options. Options are treated as a  single
     letter  or  as a single letter followed by an argument.  See
     _gggg_eeee_tttt_oooo_pppp_tttt(3c).

     _cccc_cccc is the interface to the C compilation system.  The compi-
     lation  tools  conceptually  consist of a preprocessor, com-
     piler, code  generator,  optimizer,  basic  block  analyzer,
     assembler,  and  link  editor.   _cccc_cccc  processes  the supplied
     options and then executes the various tools with the  proper
     arguments.  _cccc_cccc accepts several types of files as arguments.

     Files with _...._cccc suffix are taken to be C source files and  may
     be  preprocessed, compiled, optimized, instrumented for pro-
     filing,   assembled,   and   link   edited.   Although   the



                  Last change: 15 November 1996                 1






cc(1)                     User Commands                     cc(1)



     preprocessor  can  be used as a macro processor, this is not
     recommended, as its output is geared toward that which would
     be  acceptable as input to a valid C compiler.  The compila-
     tion process may be stopped after the completion of any pass
     if the appropriate options are supplied.  If the compilation
     process runs through the assembler, then an object  file  is
     produced with _...._oooo suffix substituted for _...._cccc.  However, the _...._oooo
     file is normally deleted if a single C file is compiled  and
     then  immediately  link  edited.   Files  with _...._ssss suffix are
     taken to be assembly source files; they may be assembled and
     link edited.  Files with a _...._SSSS suffix are treated as _----_XXXX_ssss mode
     of the compiler and passed to _////_uuuu_ssss_rrrr_////_cccc_cccc_ssss_////_llll_iiii_bbbb_////_cccc_pppp_pppp  for  prepro-
     cessing before being passed to the assembler.  Files with an
     _...._iiii are taken to be preprocessed C source files, and  may  be
     compiled,  optimized, instrumented for profiling, assembled,
     and link edited.  Files whose names do not end  in  _...._cccc,  _...._ssss,
     -f4.S  or _...._iiii are handed to the link editor, which produces a
     dynamically linked  executable  whose  name  by  default  is
     _aaaa_...._oooo_uuuu_tttt.

     Incremental Link Editor (_iiii_llll_dddd) is used in place of linker  _llll_dddd
     for  incremental  linking. See -xildon and -xildoff for more
     information.

     See option -Y_c, _d_i_r to change the default  directories  used
     for  finding  libraries. _d_i_r is a colon-separated path list.
     The default library search order for cc is:
            /opt/SUNWspro/SC4.2/lib
            /usr/ccs/lib
            /usr/lib

OPTIONS
     All platform-specific options are "silently accepted" on all
     platforms.  Any  exceptions to this rule are noted under the
     specific option.

     The following options are interpreted by _cccc_cccc:

     -#    Show each component as it is invoked (verbose mode).

     -###  Show each component as it is invoked, but, unlike the
          -# option, do not actually execute.

     -A_n_a_m_e[_((((_t_o_k_e_n_s_))))]
          Associate _n_a_m_e as a predicate with the specified _t_o_k_e_n_s
          as if by a _####_aaaa_ssss_ssss_eeee_rrrr_tttt preprocessing directive.
          Preassertions:_ssss_yyyy_ssss_tttt_eeee_mmmm_((((_uuuu_nnnn_iiii_xxxx_))))
                      _mmmm_aaaa_cccc_hhhh_iiii_nnnn_eeee_((((_ssss_pppp_aaaa_rrrr_cccc_)))) (_S_P_A_R_C)
                      _mmmm_aaaa_cccc_hhhh_iiii_nnnn_eeee_((((_iiii_3333_8888_6666_)))) (_I_n_t_e_l)
                      _cccc_pppp_uuuu_((((_ssss_pppp_aaaa_rrrr_cccc_)))) (_S_P_A_R_C)
                      _cccc_pppp_uuuu_((((_iiii_3333_8888_6666_)))) (_I_n_t_e_l)
                      _cccc_pppp_uuuu_((((_pppp_pppp_cccc_)))) (_P_o_w_e_r_P_C)



                  Last change: 15 November 1996                 2






cc(1)                     User Commands                     cc(1)



          The above are not predefined in -Xc mode.

          If -A is followed by a dash (-)  only,  it  causes  all
          predefined macros (other than those that begin with __)
          and predefined assertions to be forgotten.

     -B [static|dynamic]
          Specifies whether bindings of libraries for linking are
          static  or  dynamic,  indicating  whether libraries are
          non-shared or shared, respectively.  -B dynamic  causes
          the  link  editor  to  look for files named _llll_iiii_bbbb_x_...._ssss_oooo and
          then for files named _llll_iiii_bbbb_x_...._aaaa when given the _----_llll_x  option.
          -B static causes the link editor to look only for files
          named _llll_iiii_bbbb_x_...._aaaa.  This option may  be  specified  multiple
          times on the command line as a toggle.  This option and
          its argument are passed to _llll_dddd.

     -C    Prevents the C preprocessor  from  removing  comments,
          other than those on preprocessing directive lines.

     -c    Suppresses the link editing phase of  the  compilation
          and produces a _...._oooo file for each source file.

     -D_n_a_m_e[=_t_o_k_e_n]
          Associates _n_a_m_e with the specified _t_o_k_e_n  as  if  by  a
          _####_dddd_eeee_ffff_iiii_nnnn_eeee  preprocessing  directive.   If  no  _====_t_o_k_e_n  is
          specified, the token _1111 is supplied.
          Predefinitions:_uuuu_nnnn_iiii_xxxx
                      _ssss_pppp_aaaa_rrrr_cccc (_S_P_A_R_C)
                      _iiii_3333_8888_6666 (_I_n_t_e_l)
                      _ssss_uuuu_nnnn

          The above are not predefined in _----_XXXX_cccc mode.
          These predefinitions are valid in all modes:
                   __sun
                   __unix
                   __SUNPRO_C=0x420
                   __`_u_n_a_m_e -_s`_`_u_n_a_m_e -_r`
                   __sparc (_S_P_A_R_C)
                   __i386 (_I_n_t_e_l)
                   __BUILTIN_VA_ARG_INCR
                   __SVR4
                   __LITTLE ENDIAN (_P_o_w_e_r_P_C)
                   __ppc (_P_o_w_e_r_P_C)
          The following is predefined in _----_XXXX_aaaa and _----_XXXX_tttt modes only:
                   __RESTRICT
          The compiler also predefines the object-like macro
                   __PRAGMA_REDEFINE_EXTNAME,
          to indicate the pragma will be recognized.

     -d [y|n]
          -dy



                  Last change: 15 November 1996                 3






cc(1)                     User Commands                     cc(1)



          specifies dynamic linking, which is the default, in the link editor.
          -dn
          specifies static linking in the link editor.

          This option and its argument are passed to _llll_dddd.

     -dalign
          (_S_P_A_R_C) Allows the compiler to generate
           double-word load/store instructions wherever profitable
          for improved performance.  Assumes that all _dddd_oooo_uuuu_bbbb_llll_eeee and _llll_oooo_nnnn_gggg _llll_oooo_nnnn_gggg type
          data are double-word
          aligned, and should not be used when correct alignment is not assured.

     -E
          Preprocesses only the named C files and sends the result to the standard output.
          The output will contain preprocessing directives
          for use by the next pass of the compilation system.

     -erroff=_t
          Suppresses cc warning messages. Has no effect on  error
          messages.

          The -erroff values are  members  of  a  comma-separated
          list that consists of one or more of the following:

          _t_a_g      Suppresses the warning  message  specified  by
                   this  _t_a_g.  You can display the tag for a mes-
                   sage by using the -errtags=yes option.

          no%_t_a_g   Enables the warning message specified by  this
                   _t_a_g.

          %all     Suppresses all warning messages.

          %none    Enables all  warning  messages.  This  is  the
                   default.

          Order is important; for example, %all,no%_t_a_g suppresses
          all warning messages except _t_a_g.

     The default is
          -erroff=%none. Specifying  - erroff  is  equivalent  to
          specifying -erroff=%all.

     -errtags=_a
          Displays the message tag for each error message. _a  can
          be either yes or no. The default is -errtags=no. Speci-
          fying   - errtags  is  equivalent  to  specifying     -
          errtags=yes.

     -fast
          Selects the optimum combination of compilation  options



                  Last change: 15 November 1996                 4






cc(1)                     User Commands                     cc(1)



          for  speed.   This  should provide close to the maximum
          performance for most realistic  applications.   Modules
          compiled with -fast , must also be linked with -fast .

          It is a convenience option, and it chooses the  fastest
          code  generation  option  available on the compile-time
          hardware, the optimization level
          -xO4, a set of inline expansion templates,  the   - fns
          option  (_S_P_A_R_C),  the  -ftrap=%none option, the -dalign
          option.

          If you combine - fast  with  other  options,  the  last
          specification applies.  The code generation option, the
          optimization level and using inline template files  can
          be  overridden  by  subsequent  switches.  For example,
          although the optimization part of -fast is  - xO4,  the
          optimization part of -fast -xO1 is -xO1.

          These options are turned on for -fast:

          -xO4

          -fns

          -fsimple (_S_P_A_R_C, _P_P_C)

          -dalign (_S_P_A_R_C)

          -nofstore (_I_n_t_e_l)

          -ftrap=%none

          -xlibmil

          -fsingle

          Do not use this option for programs that depend on IEEE
          standard  exception  handling;  you  can  get different
          numerical results, premature  program  termination,  or
          unexpected SIGFPE signals.

     -fd   Reports K&R function declarations and definitions.

     -flags
          Prints a one-line summary of available options.

     -fnonstd
          Causes  nonstandard  initialization  of  floating-point
          arithmetic  hardware.  In addition, the -fnonstd option
          causes hardware traps to be enabled for  floating-point
          overflow,  division  by  zero,  and  invalid operations
          exceptions.  These are converted into  SIGFPE  signals;



                  Last change: 15 November 1996                 5






cc(1)                     User Commands                     cc(1)



          if  the  program  has  no SIGFPE handler, it terminates
          with a memory dump (see ieee_handler(3m)).  By default,
          IEEE  754  floating-point  arithmetic  is  nonstop, and
          underflows are gradual.

          -fnonstd is a macro for -fns and -ftrap=common.

     -fns  Turns on the nonstandard floating-point mode.

          The default is the standard floating-point mode.

          If you compile one routine with -fns, then compile  all
          the  program  routines with the -fns option; otherwise,
          you can get unexpected results.

     -fprecision=_p
          (_I_n_t_e_l) Initializes the rounding precision mode bits in
          the  Floating-point  Control Word to _p, which is one of
          single (24 bits), double (53  bits),  or  extended  (64
          bits)   respectively.    The   default   floating-point
          rounding-precision mode is extended.

          Note that on Intel, only the precision,  not  exponent,
          range  is  affected  by  the  setting of floating-point
          rounding precision mode.

     -fround=_r
          Sets the IEEE 754 rounding mode that is established  at
          runtime during the program initialization.

          _r must be one of: nearest, tozero, negative, positive.

          The default is -fround=nearest.

          The meanings are the same as those for  the  _iiii_eeee_eeee_eeee______ffff_llll_aaaa_gggg_ssss
          subroutine.

          If you compile one routine with -fround=_r, compile  all
          the  program  routines  with the same -fround=_r option;
          otherwise, you can get unexpected results.

     -fsimple[=_n]
          Allows the optimizer to  make  simplifying  assumptions
          concerning  floating-point arithmetic. If _n is present,
          it must be 0, 1, or 2.

          The defaults are:
          o  With no -fsimple[=n], the compiler uses -fsimple=0.
          o  With only -fsimple, no =n, the compiler uses - fsim-
          ple=1.

          -fsimple=0



                  Last change: 15 November 1996                 6






cc(1)                     User Commands                     cc(1)



          Permits no simplifying  assumptions.  Preserves  strict
          IEEE 754 conformance.

          -fsimple=1
          Allows conservative simplifications. The resulting code
          does  not  strictly  conform  to  IEEE 754, but numeric
          results of most programs are unchanged.

          With -fsimple=1, the optimizer can assume  the  follow-
          ing:
          o  The IEEE 754 default rounding/trapping modes do  not
          change after process initialization.
          o Computations producing no visible result  other  than
          potential floating- point exceptions may be deleted.
          o Computations with Infinity or NaNs as  operands  need
          not  propagate  NaNs to their results. For example, x*0
          may be replaced by 0.
          o Computations do not depend on sign of zero.

          With -fsimple=1, the optimizer is not allowed to optim-
          ize  completely  without  regard  to roundoff or excep-
          tions. In particular, a floating-point computation can-
          not  be replaced by one that produces different results
          with rounding modes held constant at run  time.  - fast
          implies -fsimple=1.

          -fsimple=2
          Permits aggressive floating  point  optimizations  that
          may  cause  many  programs to produce different numeric
          results due to changes in rounding. For  example,  per-
          mits  the  optimizer to replace all computations of x/y
          in a given loop with x*z, where x/y is guaranteed to be
          evaluated  at  least  once  in the loop, z=1/y, and the
          values of y and z are known  to  have  constant  values
          during execution of the loop.

          Even with -fsimple=2, the optimizer still is  not  per-
          mitted  to  introduce  a  floating point exception in a
          program that otherwise produces none.

     -fsingle
          (-Xt and -Xs modes only)  Causes the compiler to evalu-
          ate  float expressions as single precision, rather than
          double precision.  (This option has no  effect  if  the
          compiler  is  used in either -Xa or -Xc modes, as float
          expressions are already evaluated as single precision.)

     -fstore
          (_I_n_t_e_l) Causes the compiler to convert the value  of  a
          floating-point  expression  or  function to the type on
          the left-hand side of an assignment, when that  expres-
          sion or function is assigned to a variable, or when the



                  Last change: 15 November 1996                 7






cc(1)                     User Commands                     cc(1)



          expression is cast to a  shorter  floating-point  type,
          rather  than  leaving the value in the register. Due to
          roundoffs and truncation, the results may be  different
          from  those  generated from the register value. This is
          the default mode.

     -ftrap=_t
          Sets the IEEE 754 trapping mode in effect at startup.

          _t is a comma-separated list that  consists  of  one  or
          more   of   the   following:   %all,   %none,   common,
          [no%]invalid,      [no%]overflow,       [no%]underflow,
          [no%]division, [no%]inexact.

          The default is -ftrap=%none.

          This option sets the IEEE 754 trapping modes  that  are
          established  at  program initialization.  Processing is
          left-to-right.  The common exceptions,  by  definition,
          are invalid, division by zero, and overflow.

          Example: -ftrap=%all,no%inexact means  set  all  traps,
          except inexact.

          The meanings are the same as for the _iiii_eeee_eeee_eeee______ffff_llll_aaaa_gggg_ssss subrou-
          tine, except that:
          o %all turns on all the trapping modes.
          o %none, the default, turns off all trapping modes.
          o A no% prefix turns off that specific trapping mode.

          If you compile one routine with -ftrap=_t,  compile  all
          routines  of the program with the same -ftrap=_t option;
          otherwise, you can get unexpected results.

     -G    Directs the link editor to  produce  a  shared  object
          rather  than  a  dynamically  linked  executable.  This
          option is passed to _llll_dddd.  It cannot be used with the _----_dddd_nnnn
          option.

     -g   Produces  additional  symbol  table   information   for
          dbx(1).

          The -g option makes - xildon  the  default  incremental
          linker  option. See -xildon.  Invoke ild in place of ld
          unless any of the following are true:  The -G option is
          present,  the   - xildoff option is present, any source
          files are named on the command line.

          When used with the  _----_OOOO  option,  a  limited  amount  of
          debugging is available. The combination, _----_xxxx_OOOO_4444 _----_gggg, turns
          off the inlining that you usually get with _----_xxxx_OOOO_4444.




                  Last change: 15 November 1996                 8






cc(1)                     User Commands                     cc(1)



     -H    Prints, one per line,  the  path  name  of  each  file
          included  during  the  current  compilation to standard
          output.

     -h _n_a_m_e
          Assigns a name to a shared dynamic library; allows  you
          to keep different versions of a library.

          In general, the _n_a_m_e after _----_hhhh should be the same as the
          file  name given in the _----_oooo option. The space between _----_hhhh
          and _n_a_m_e is optional.

          The linker assigns the specified _n_a_m_e  to  the  library
          and records the name in the library file as the _i_n_t_r_i_n_-
          _s_i_c name of the library. If there is no _----_hhhh _n_a_m_e option,
          then no intrinsic name is recorded in the library file.

          When the runtime linker loads the library into an  exe-
          cutable  file,  it  copies  the intrinsic name from the
          library file into the executable, into a list of needed
          shared library files. Every executable has such a list.
          If there is no intrinsic name of a shared library, then
          the  linker  copies the path of the shared library file
          instead.

     -I_d_i_r
          Looks in _d_i_r, prior to /usr/include, for included files
          whose  names  do not begin with slash (/).  Directories
          for multiple -I  options  are  searched  in  the  order
          specified.

     -i    Ignores the LD_LIBRARY_PATH setting.

     -keeptmp
          Retains temporary  files  created  during  compilation,
          instead of deleting them automatically.

     -KPIC
          Produces position-independent code for  use  in  shared
          libraries.   Each  reference  to a global datum is gen-
          erated as a de-reference of a  pointer  in  the  global
          offset  table.   Each function call is generated in _pppp_cccc-
          relative addressing mode through  a  procedure  linkage
          table.

          (_S_P_A_R_C) (_P_o_w_e_r_P_C) With this option, the  global  offset
          table spans the range of 32-bit addresses in those rare
          cases where there are too many global data objects for
          -Kpic

          (_I_n_t_e_l) -KPIC is identical to -Kpic .




                  Last change: 15 November 1996                 9






cc(1)                     User Commands                     cc(1)



     -Kpic
          Produces position-independent code for  use  in  shared
          libraries.

          (_S_P_A_R_C) (_P_o_w_e_r_P_C) It is similar to -KPIC , except  that
          the size of the global offset table is limited to 8K.

     -L_d_i_r
          Adds _d_i_r  to  the  list  of  directories  searched  for
          libraries  by  _llll_dddd.   This  option and its arguments are
          passed to _llll_dddd.

     -l_n_a_m_e
          Links with object library _llll_iiii_bbbb_n_a_m_e_...._ssss_oooo or _llll_iiii_bbbb_n_a_m_e_...._aaaa  (for
          _llll_dddd(1)).  The  order of libraries in the command line is
          important, as symbols are resolved from left to  right.
          This option must follow the _s_o_u_r_c_e_f_i_l_e.

     -mc   Removes duplicate strings from the _...._cccc_oooo_mmmm_mmmm_eeee_nnnn_tttt section of
          an  object file.  When you use the _----_mmmm_cccc flag, _----_mmmm_cccc_ssss _----_cccc is
          invoked.

     -misalign
          (_S_P_A_R_C, _P_o_w_e_r_P_C) Informs the compiler that data is  not
          properly  aligned  and thus very conservative loads and
          stores must be used for data, that is, one  byte  at  a
          time.  Using  this option can cause significant perfor-
          mance degradation when running  the  program.   If  you
          compile  and  link  in separate steps, this option must
          appear on both the compile and link command lines.

     -misalign2
          (_S_P_A_R_C, _P_o_w_e_r_P_C) Assumes  that  data  is  not  properly
          aligned,  but  that data is at least half-word aligned.
          Though conservative uses of loads and  stores  must  be
          used for data, the performance degradation when running
          a program is less than that seen for _----_mmmm_iiii_ssss_aaaa_llll_iiii_gggg_nnnn.  If you
          compile  and  link  in separate steps, this option must
          appear on both the compile and link command lines.

     -mr   Removes all strings from the _...._cccc_oooo_mmmm_mmmm_eeee_nnnn_tttt  section  of  an
          object  file.   When  you  use  the _----_mmmm_rrrr flag, _mmmm_cccc_ssss _----_dddd is
          invoked.

     -mr,_s_t_r_i_n_g
          Removes all  strings  from  the  _...._cccc_oooo_mmmm_mmmm_eeee_nnnn_tttt  section  and
          inserts  _s_t_r_i_n_g  in  the _...._cccc_oooo_mmmm_mmmm_eeee_nnnn_tttt section of the object
          file. If _s_t_r_i_n_g contains embedded blanks,  it  must  be
          enclosed  in  quotation  marks.  If _s_t_r_i_n_g is null, the
          _...._cccc_oooo_mmmm_mmmm_eeee_nnnn_tttt section will be empty. When you use this flag,
          _mmmm_cccc_ssss _----_dddd _----_aaaa is invoked.




                  Last change: 15 November 1996                10






cc(1)                     User Commands                     cc(1)



     -mt   Passes D_REENTRANT to preprocessor. Appends _---- _llll_tttt_hhhh_rrrr_eeee_aaaa_dddd.
          If  you are doing your own multithread coding, you must
          use this option in the  compile  and  link  steps.   To
          obtain  faster  execution,  this option requires a mul-
          tiprocessor system. On a single-processor  system,  the
          resulting executable usually runs more slowly with this
          option.

     -native
          Ascertains which  code-generation  options  (_S_P_A_R_C)  or
          which  processor (_I_n_t_e_l) (_P_o_w_e_r_P_C) are available on the
          machine running the compiler, and directs the  compiler
          to generate code targeted for that machine.

          This option is a synonym for -xtarget=native .

          The -fast macro includes -native in its expansion.

     -nofstore
          (_I_n_t_e_l) Does not convert the value of a  floating-point
          expression  or  function  to  the type on the left-hand
          side of an assignment, when that expression or function
          is  assigned  to  a  variable,  or is cast to a shorter
          floating-point type; rather, it leaves the value  in  a
          register.

     -noqueue
          Disables queueing of compiler license requests.

     -O    Equivalent to -xO2 .

     -o _f_i_l_e_n_a_m_e
          Names the output file _f_i_l_e_n_a_m_e, instead of the  default
          _aaaa_...._oooo_uuuu_tttt.  _f_i_l_e_n_a_m_e cannot be the same as _s_o_u_r_c_e_f_i_l_e since
          _cccc_cccc does not overwrite the source file.  This option and
          its argument are passed to _llll_dddd.

     -P    Preprocesses only the named C  files  and  leaves  the
          result  in corresponding files suffixed _...._iiii.  The output
          will not contain  any  preprocessing  line  directives,
          unlike _----_EEEE.

     -p    Prepares the object code to collect data for profiling
          with  _pppp_rrrr_oooo_ffff_((((_1111_)))); also, if link editing takes place, links
          profiled versions of _llll_iiii_bbbb_cccc_...._aaaa and _llll_iiii_bbbb_mmmm_...._aaaa (with  the  _---- _llll_mmmm
          option).   A _mmmm_oooo_nnnn_...._oooo_uuuu_tttt file will then be produced at nor-
          mal termination of execution of the object program.  An
          execution profile can then be generated by use of _pppp_rrrr_oooo_ffff.

     -Q[_yyyy|_nnnn]
          Emits or does not emit  identification  information  to
          the   output   file.   If  _yyyy  is  used,  identification



                  Last change: 15 November 1996                11






cc(1)                     User Commands                     cc(1)



          information about each invoked compilation tool will be
          added to the output files (the default behavior).  This
          can  be  useful  for  software   administration.    _----_QQQQ_nnnn
          suppresses this information.

     -qp   Same as -p.

     -R_d_i_r[:_d_i_r]
          A colon-separated list of directories used  to  specify
          library  search  directories to the runtime linker.  If
          present and not null, it  is  recorded  in  the  output
          object file and passed to the runtime linker.

          If both LD_RUN_PATH and the -R  option  are  specified,
          the -R option takes precedence.

     -S    Compiles, but does not assemble or link edit the named
          C  files.   The  assembler-language  output  is left in
          corresponding files suffixed _...._ssss.

     -s    Removes all symbolic debugging  information  from  the
          output  object  file.   This option is passed to ld(1).
          This option cannot be specified with _----_gggg.

     -U_n_a_m_e
          Causes any definition of _n_a_m_e to be undefined, as if by
          a  #undef  preprocessing directive. If the same _n_a_m_e is
          specified for both -D and - U,  _n_a_m_e  is  not  defined,
          regardless  of  the order of the options.  You can give
          multiple -U_n_a_m_e options.

     -V    Causes each invoked tool to print its version informa-
          tion on the standard error output.

     -v    Causes the  compiler  to  perform  more  and  stricter
          semantic checks, and to enable certain _llll_iiii_nnnn_tttt-like checks
          on the named C files.

     -W_c,_a_r_g
          Passes the argument _a_r_g to _c.  Each  argument  must  be
          separated from the preceding by only a comma.  (A comma
          can be part of an argument by escaping it by an immedi-
          ately  preceding backslash (_\\\\) character; the backslash
          is removed from the resulting argument.)  All -W  argu-
          ments  are  passed after the regular command-line argu-
          ments.

     _c can be one of the following:

               _aaaa    assembler: (fbe) (gas)
               c    C      code      generator:      (cg)(_S_P_A_R_C),
                    (codegen)(_I_n_t_e_l) (_P_o_w_e_r_P_C)



                  Last change: 15 November 1996                12






cc(1)                     User Commands                     cc(1)



               _llll    link editor (ld)
               _mmmm    mcs
               _pppp    preprocessor (cpp)
               _0000    compiler (acomp and ssbd)
               _2222    optimizer: (iropt) (_S_P_A_R_C); intermediate code
                    translator:    (cg386)    (_I_n_t_e_l),    (cgppc)
                    (_P_o_w_e_r_P_C)

          For example, _----_WWWW_aaaa_,,,,_----_oooo_,,,,_o_b_j_f_i_l_e passes _----_oooo  and  _o_b_j_f_i_l_e  to
          the  assembler,  in that order; also _----_WWWW_llll_,,,,_----_IIII_,,,,_n_a_m_e causes
          the linking phase to override the default name  of  the
          dynamic linker, _////_uuuu_ssss_rrrr_////_llll_iiii_bbbb_////_llll_dddd_...._ssss_oooo_...._1111.

          The order in which the argument(s) are passed to a tool
          with  respect  to  the  other  specified  command  line
          options may change.

     -w    Does not print compiler warning messages.

     -X[a|c|s|t]
          Specifies the degree of conformance to the ANSI C stan-
          dard.  Specifies one of the following:

          _aaaa (ANSI)
               ANSI C plus K&R C compatibility  extensions,  with
               semantic  changes required by ANSI C.  Where K&R C
               and ANSI C specify  different  semantics  for  the
               same  construct,  the compiler will issue warnings
               about the conflict and use the ANSI C  interpreta-
               tion. This is the default compiler mode.

          _cccc (conformance)
               Maximally conformant ANSI C, without K&R C  compa-
               tibility  extensions.   The  compiler  will  issue
               errors and warnings for programs that use non-ANSI
               C constructs.

          _ssss (K&R C)
               The compiled language includes all features compa-
               tible  with  (pre-ANSI) K&R C.  The compiler tries
               to warn about all language  constructs  that  have
               differing  behavior between Sun ANSI C and the K&R
               C. Invokes cpp for  processing.  ___________SSSS_TTTT_DDDD_CCCC__________  is  not
               defined in this mode.  (See the _C _T_r_a_n_s_i_t_i_o_n _G_u_i_d_e
               for differences between ANSI and K&R C.)

          _tttt (transition)
               ANSI  C  plus  K&R  C  compatibility   extensions,
               without  semantic  changes  required  by  ANSI  C.
               Where K&R C and ANSI C specify different semantics
               for  the  same  construct, the compiler will issue
               warnings about the conflict  and  use  the  K&R  C



                  Last change: 15 November 1996                13






cc(1)                     User Commands                     cc(1)



               interpretation.

          The predefined macro ___________SSSS_TTTT_DDDD_CCCC__________ has the value _0000 for  _---- _XXXX_tttt
          and  _---- _XXXX_aaaa, and _1111 for _----_XXXX_cccc.  (It is not defined for -Xs.)
          All warning messages about differing  behavior  can  be
          eliminated through appropriate coding; for example, use
          of casts can eliminate the  integral  promotion  change
          warnings.

     -x386
          (_I_n_t_e_l) Optimizes for the 80386 processor.

     -x486
          (_I_n_t_e_l) Optimizes for the 80486 processor.

     -xa   Inserts code to count how many times each basic  block
          is  executed. This is the old style of basic block pro-
          filing for tcov. See -xprofile=tcov for information  on
          the new style of profiling and the tcov(1) man page for
          more details.

          Invokes a runtime recording mechanism that creates a .d
          file for every .c file (at normal termination).  The .d
          file accumulates execution data for  the  corresponding
          source  file.   The  tcov(1) utility can then be run on
          the source file to generate statistics about  the  pro-
          gram. This option is incompatible with -g .

          If set at compile-time, the TCOVDIR  environment  vari-
          able  specifies  the  directory  where the .d files are
          located. If this variable is  not  set,  the  .d  files
          remain in the same directory as the .c files.

          The -xprofile=tcov and the -xa options  are  compatible
          in a single executable. That is, you can link a program
          that contains some files which have been compiled  with
          -xprofile=tcov, and others with -xa. You cannot compile
          a single file with both options.

     -xarch=_a
          Specifies the set of instructions the compiler may use.

          _a must  be  one  of:  generic,  v7,  v8a,  v8,  v8plus,
          v8plusa, 386, pentium_pro, ppc.  ppc_nofma

          Although this option can be used alone, it is  part  of
          the  expansion  of the -xtarget option; its primary use
          is to override a value supplied by the -xtarget option.

          This option limits the instructions generated to  those
          of the specified architecture, and allows the specified
          set of instructions.  The option does not guarantee the



                  Last change: 15 November 1996                14






cc(1)                     User Commands                     cc(1)



          specified set is used; however, under optimization, the
          set is usually used.

          If this option is used with optimization, the appropri-
          ate  choice can provide good performance of the execut-
          able on the specified  architecture.  An  inappropriate
          choice  can  result  in  serious degradation of perfor-
          mance.

          v7, v8, and v8a are all binary compatible.  v8plus  and
          v8plusa  are binary compatible with each other and for-
          ward, but not backward. For any particular choice,  the
          generated  executable  can run much more slowly on ear-
          lier architectures (to the left  in  the  above  list).
          See the _C _4._2 _U_s_e_r'_s _G_u_i_d_e for details.

          The -xarch values are:

          generic
                Gets good performance on Intel, PowerPC, and most
                SPARCs,  and  major  degradation on none. This is
                the default.

          v7    Limits the instruction set to V7 architecture.

          v8a   Limits the instruction set to the V8a version  of
                the V8 architecture.

          v8    Limits the instruction set to V8 architecture.

          v8plus
                Limits the instruction set to the V8plus  version
                of the V9 architecture.

          v8plusa
                Limits the instruction set to the V8plusa version
                of the V9 architecture.

          386   Limits the instruction set to Intel x86 architec-
                ture.

          pentium_pro
                Limits  the  instruction   set   to   the   Intel
                pentium_pro architecture.

          ppc   Limits the instruction set to the PowerPC  archi-
                tecture.

          ppc_nofma
                Same as _pppp_pppp_cccc, but will not issue "fused  multiply-
                add" instruction.




                  Last change: 15 November 1996                15






cc(1)                     User Commands                     cc(1)



     -xautopar
          (_S_P_A_R_C) Turns on automatic parallelization for multiple
          processors. Does dependence analysis (analyze loops for
          inter- iteration data dependence) and loop  restructur-
          ing.  If optimization is not at _----_xxxx_OOOO_3333 or higher, optimi-
          zation is raised to _----_xxxx_OOOO_3333 and a warning is emitted.

          Avoid _----_xxxx_aaaa_uuuu_tttt_oooo_pppp_aaaa_rrrr if you do your own thread management.

          The Sun Workshop includes the license required  to  use
          multiprocessor  C. To get faster execution, this option
          requires a multiple  processor  system.  On  a  single-
          processor  system,  the  resulting  binary usually runs
          slower.

          To determine how many  processors  you  have,  use  the
          _pppp_rrrr_ssss_iiii_nnnn_ffff_oooo command.

          To request a number of  processors,  set  the  _PPPP_AAAA_RRRR_AAAA_LLLL_LLLL_EEEE_LLLL
          environment variable.  The default is 1.

          o Do not request more processors than are available.

          o If _NNNN is the number of processors on the machine, then
            for    a   one-user,   multiprocessor   system,   try
            _PPPP_AAAA_RRRR_AAAA_LLLL_LLLL_EEEE_LLLL_====_NNNN_----_1111.

          If you use _----_xxxx_aaaa_uuuu_tttt_oooo_pppp_aaaa_rrrr and compile and link in one  step,
          then  linking  automatically  includes the microtasking
          library and the threads-safe C runtime library. If  you
          use  - xautopar and compile and link in separate steps,
          then you must also link with _----_xxxx_aaaa_uuuu_tttt_oooo_pppp_aaaa_rrrr.

     -xcache=_c
          Defines the cache properties for use by the optimizer.

          _c must be one of the following:

          o generic

          o _s_1/_l_1/_a_1

          o _s_1/_l_1/_a_1:_s_2/_l_2/_a_2

          o _s_1/_l_1/_a_1:_s_2/_l_2/_a_2:_s_3/_l_3/_a_3

          The _s_i/_l_i/_a_i are defined as follows:

          _s_i
            The size of the data cache at level _i, in kilobytes

          _l_i



                  Last change: 15 November 1996                16






cc(1)                     User Commands                     cc(1)



            The line size of the data cache at level _i, in bytes

          _a_i
            The associativity of the data cache at level _i

          Although this option can be used alone, it is  part  of
          the  expansion  of the -xtarget option; its primary use
          is to override a value supplied by the -xtarget option.

          This option specifies the  cache  properties  that  the
          optimizer  can use. It does not guarantee that any par-
          ticular cache property is used.

          The -xcache values are:

          generic
                Defines the cache properties for good performance
                on most SPARCs.  This is the default.

          _s_1/_l_1/_a_1
                Defines level 1 cache properties.

          _s_1/_l_1/_a_1:_s_2/_l_2/_a_2
                Defines levels 1 and 2 cache properties.

          _s_1/_l_1/_a_1:_s_2/_l_2/_a_2:_s_3/_l_3/_a_3
                Defines levels 1, 2, and 3 cache properties.

     Example:_----_xxxx_cccc_aaaa_cccc_hhhh_eeee_====_1111_6666_////_3333_2222_////_4444_::::_1111_0000_2222_4444_////_3333_2222_////_1111 specifies the following:

          Level 1 cache has:  Level 2 cache has:

          16K bytes
              1024K bytes

          32 bytes line size
              32 bytes line size

          4-way associativity
          Direct mapping associativity.

     -xCC  Accepts the C++-style comments. In particular, the
          "//" can be used to indicate the start of a comment.

     -xcg89
          (_S_P_A_R_C) This option is a macro for:
          -xarch=v7 -xchip=old -xcache=64/32/1.

     -xcg92
          (_S_P_A_R_C) This option is a macro for:
          -xarch=v8 -xchip=super -xcache=16/32/4:1024/32/1.




                  Last change: 15 November 1996                17






cc(1)                     User Commands                     cc(1)



     -xchip=_c
          Specifies the target processor for use by the optim-
          izer.

          _c must be one of: generic, old, super, super2, micro,
          micro2, hyper, hyper2, powerup, ultra, 386, 486, pen-
          tium, pentium_pro, 603, 604.

          Although this option can be used alone, it is part of
          the expansion of the -xtarget option; its primary use
          is to override a value supplied by the -xtarget option.

          This option specifies timing properties by specifying
          the target processor.

          Some effects are:

          o The ordering of instructions, that is, scheduling

          o The way the compiler uses branches

          o The instructions to use in cases where semantically
            equivalent alternatives are available

          The -xchip values are:

          generic
                 Uses timing properties for good performance on
                 most SPARCs.

          old    Uses timing properties of pre-SuperSPARC proces-
                 sors.

          super  Uses timing properties of the SuperSPARC chip.

          super2 Uses timing properties of the SuperSPARC II
                 chip.

          micro  Uses timing properties of the microSPARC chip.

          micro2 Uses timing properties of the microSPARC II
                 chip.

          hyper  Uses timing properties of the hyperSPARC chip.

          hyper2 Uses timing properties of the hyperSPARC II
                 chip.

          powerup
                 Uses timing properties of the Weitek PowerUp
                 chip.




                  Last change: 15 November 1996                18






cc(1)                     User Commands                     cc(1)



          ultra  Uses timing properties of the UltraSPARC chip.

          386    Uses timing properties of the Intel 386 archi-
                 tecture.

          486    Uses timing properties of the Intel 486 archi-
                 tecture.

          pentium
                 Uses timing properties of the Intel pentium
                 architecture.

          pentium_pro
                 Uses timing properties of the Intel pentium_pro
                 architecture.

          603    Uses timing properties of the PowerPC 603 chip.

          604    Uses timing properties of the PowerPC 604 chip.

          Values for Intel and PowerPC are shown here:

          Intel accepts:

                 generic

                 386

                 486

                 pentium

                 pentium_pro

          PowerPC accepts:

                 generic

     -xcrossfile
          (_S_P_A_R_C) Enables optimization and inlining across source
          files.

          Only effective with -xO4 or -xO5, the compiler is
          allowed to analyze all the files on the command line as
          if they had been concatenated into a single file.

     -xdepend
          (_S_P_A_R_C) Analyzes loops for inter-iteration data depen-
          dencies and does loop restructuring.

          Loop restructuring includes loop interchange, loop
          fusion, scalar replacement, and elimination of "dead"



                  Last change: 15 November 1996                19






cc(1)                     User Commands                     cc(1)



          array assignments. If optimization is not at _----_xxxx_OOOO_3333 or
          higher, optimization is raised to _----_xxxx_OOOO_3333 and a warning is
          issued.

          Dependency analysis is included in -xautoparor-xparal-
          lel.  The dependency analysis is done at compile time.

          Dependency analysis may help on single-processor sys-
          tems. However, if you try _----_xxxx_dddd_eeee_pppp_eeee_nnnn_dddd on single-processor
          systems, you should not use either _----_xxxx_aaaa_uuuu_tttt_oooo_pppp_aaaa_rrrr or _----_xxxx_eeee_xxxx_----
          _pppp_llll_iiii_cccc_iiii_tttt_pppp_aaaa_rrrr. If either of them is on, the _----_xxxx_dddd_eeee_pppp_eeee_nnnn_dddd optim-
          ization is done for multiple-processor systems.

     -xe   Performs only syntax and semantic checking on the
          source file, but does not produce any object or execut-
          able file.

     -xexplicitpar
          (_S_P_A_R_C) Parallelizes the loops that are specified.  You
          do the dependency analysis: analyze and specify loops
          for inter-iteration and data dependencies. The software
          parallelizes the specified loops. If optimization is
          not at -xO3 or higher, then it is raised to -xO3 and a
          warning is issued.

          Avoid -xexplicitpar if you do your own thread manage-
          ment.

          The Sun WorkShop includes the license required to use
          multiprocessor C options.  To get faster code, use this
          option on a multiprocessor system. On a single-
          processor system, the generated code usually runs
          slower.

          If you identify a loop for parallelization, and the
          loop has dependencies, you can get incorrect results,
          possibly different ones with each run, and with no
          warnings.  Do not apply an explicit parallel pragma to
          a reduction loop.  The explicit parallelization is
          done, but the reduction aspect of the loop is not done,
          and the results can be incorrect.

          If you use -xexplicitpar and compile and link in _o_n_e
          step, then linking automatically includes the micro-
          tasking library and the threads-safe C runtime library.
          If you use -xexplicitpar and compile and link in
          _s_e_p_a_r_a_t_e steps, then you must also _l_i_n_k with -xexpli-
          citpar.

     -xF   Enables performance analysis of the executable using
          the WorkShop Analyzer.  (See analyzer(1) man pages.)
          Produces code that can be reordered at the function



                  Last change: 15 November 1996                20






cc(1)                     User Commands                     cc(1)



          level.  Each function in the file is placed in a
          separate section; for example, functions foo() and
          bar() will be placed in the sections .text%foo and
          .text%bar , respectively.  Function ordering in the
          executable can be controlled by using -xF in conjunc-
          tion with the -M option to ld (see ld(1)).

          This option also causes the assembler to generate some
          debugging information necessary for data collection in
          the object file.

     -xhelp=_f
          Displays on-line help information.

          f must be one of _ffff_llll_aaaa_gggg_ssss_,,,, _rrrr_eeee_aaaa_dddd_mmmm_eeee or _eeee_rrrr_rrrr_oooo_rrrr_ssss.

          -xhelp=flags displays a summary of the compiler
          options; -xhelp=readme displays the readme file; -
          xhelp=errors displays the Error and Warning Messages
          file.

     -xildoff
          Turns off the incremental linker and forces the use of
          ld.  This option is the default if you do not use the -
          g option, or if you do use the -G option, or any source
          files are present on the command line.  Override this
          default by using the -xildon option.

     -xildon
          Turns on the incremental linker and forces the use of
          ild in _i_n_c_r_e_m_e_n_t_a_l mode. This option is the default if
          you use the -g option, and you do not use the -G
          option, and there are no source files present on the
          command line. Override this default by using the -xild-
          off option.

     -xinline=[_f_1,...,_f_n]
          For user-written routines, tries to inline only those
          named in the list _f_1 to _f_n. It tries routines only in
          the file being compiled.  The list is a comma-separated
          list of functions and subroutines.

          If compiling with -xO3, you can use this option to
          increase optimization by inlining some routines.  The -
          xO3 option does not inline by itself.

          If compiling with -xO4, you can use this option to
          decrease optimization by restricting inlining to only
          those routines in the list. With -xO4, the compiler
          normally tries to inline all user-written subroutines
          and functions.  When xinline= is specified with an
          empty _rrrr_llll_iiii_ssss_tttt, it indicates that none of the routines in



                  Last change: 15 November 1996                21






cc(1)                     User Commands                     cc(1)



          the source file are to be inlined.

          A routine is not inlined if any of the following apply
          (no warning is issued):
          o  Optimization is less than _----_xxxx_OOOO_3333
          o  The routine cannot be found
          o  Inlining the routine does not look profitable or
          safe to iropt
          o  The source for the routine is not in the file being
          compiled (however, see -xcrossfile).

     -xlibmieee
          Forces IEEE 754 style return values for math routines
          in exceptional cases.  In such cases, no exeception
          message will be printed, and errno should not be relied
          on.

     -xlibmil
          Inlines some library routines for faster execution.

     -xlic_lib_=_l
          (_S_P_A_R_C, _I_n_t_e_l) Links in the Sun supplied licensed
          libraries specified in _l, where _l is a comma-separated
          list of libraries.

     -xlicinfo
          Does not check out a license but returns information on
          the status of licensing.

     -xloopinfo
          (_S_P_A_R_C) Shows which loops are parallelized and which
          are not. This option is normally for use with the -xau-
          topar and -xexplicitpar options. The Sun WorkShop
          includes the license required to use multiprocessor C
          options.

     -xM   Runs the ANSI preprocessor on the named C programs,
          generates makefile dependencies and sends the result to
          the standard output (see make(1) for details about
          makefiles and dependencies).  Specifying -xM with -Xs
          runs the pre-ANSI preprocessor, /usr/ccs/lib/cpp .

     -xM1  Same as -xM except that -xM1 does not report dependen-
          cies for _////_uuuu_ssss_rrrr_////_iiii_nnnn_cccc_llll_uuuu_dddd_eeee header files.  For example:
               _mmmm_oooo_rrrr_eeee _hhhh_eeee_llll_llll_oooo_...._cccc
               #include <stdio.h>
               main()
               {
                   (void) printf ("hello\n");
               }
               _cccc_cccc _----_xxxx_MMMM _hhhh_eeee_llll_llll_oooo_...._cccc
               hello.o: hello.c



                  Last change: 15 November 1996                22






cc(1)                     User Commands                     cc(1)



               hello.o: /usr/include/stdio.h
          Compiling with _----_xxxx_MMMM_1111 does not report header file dependencies:
               _cccc_cccc _----_xxxx_MMMM_1111 _hhhh_eeee_llll_llll_oooo_...._cccc
               hello.o: hello.c

     -xMerge
          (_S_P_A_R_C) Directs cc to merge the data segment with the
          text segment.  Data initialized in the object file pro-
          duced by this compilation is read-only and (unless
          linked with ld -N) is shared between processes.

     -xnolib
          Does not link any libraries by default; that is, no -l
          options are passed to ld . Normally, the cc driver
          passes -lc to ld .

          When you use -xnolib , you have to pass all -l options
          yourself. For example:
               cc test.c -xnolib -Bstatic -lm -Bdynamic -lc
          links libm statically and the other libraries dynami-
          cally.

     -xnolibmil
          Does _n_o_t inline math library routines.  Use this after
          the -fast option:
          cc fast xnolibmil ...

     -xO [1|2|3|4|5]
          Optimizes the object code. Specifying -xO is equivalent
          to specifying -xO2.

          The _l_e_v_e_l_s (1, 2, 3, 4, or 5) you can use differ
          according to the platform you are using.

               ( _S_P_A_R_C)

               -xO1  Does basic local optimization (peephole).

               -xO2  Does basic local and global optimization.
                    This is induction variable elimination, local
                    and global common subexpression elimination,
                    algebraic simplification, copy propagation,
                    constant propagation, loop-invariant optimi-
                    zation, register allocation, basic block
                    merging, tail recursion elimination, dead
                    code elimination, tail call elimination and
                    complex expression expansion.

                    The -xO2 level does not assign global, exter-
                    nal, or indirect references or definitions to
                    registers. It treats these references and
                    definitions as if they were declared



                  Last change: 15 November 1996                23






cc(1)                     User Commands                     cc(1)



                    "volatile." In general, the -xO2 level
                    results in minimum code size.

               -xO3  Performs like -xO2 but, also optimizes
                    references or definitions for external vari-
                    ables. Loop unrolling and software pipelining
                    are also performed. The -xO3 level does not
                    trace the effects of pointer assignments.
                    When compiling either device drivers, or pro-
                    grams that modify external variables from
                    within signal handlers, you may need to use
                    the volatile type qualifier to protect the
                    object from optimization.  In general, the -
                    xO3 level results in increased code size.

               -xO4  Performs like -xO3 but, also does automatic
                    inlining of functions contained in the same
                    file; this usually improves execution speed.
                    The -xO4 level does trace the effects of
                    pointer assignments.  In general, the -xO4
                    level results in increased code size.

               -xO5  Generates the highest level of optimization.
                    Uses optimization algorithms that take more
                    compilation time or that do not have as high
                    a certainty of improving execution time.
                    Optimization at this level is more likely to
                    improve performance if it is done with pro-
                    file feedback.

               (_I_n_t_e_l) (_P_o_w_e_r_P_C)

               -xO1  Preloads arguments from memory, cross jump-
                    ing (tail merging), as well as the single
                    pass of the default optimization.

               -xO2  Schedules both high- and low-level instruc-
                    tions and performs improved spill analysis,
                    loop memory-reference elimination, register
                    lifetime analysis, enhanced register alloca-
                    tion, and elimination of global common subex-
                    pression.

               -xO3  Performs loop strength reduction, induction
                    variable elimination, as well as the optimi-
                    zation done by level 2.

               -xO4  Performs loop unrolling, avoids creating
                    stack frames when possible, and automatically
                    inlines functions contained in the same file,
                    as well as the optimization done by levels 2
                    and 3. Note that this optimization level can



                  Last change: 15 November 1996                24






cc(1)                     User Commands                     cc(1)



                    cause stack traces from _aaaa_dddd_bbbb and _dddd_bbbb_xxxx to be
                    incorrect.

               -xO5 Generates the highest level of optimization.
                    Uses optimization algorithms that take more
                    compilation time or that do not have as high
                    a certainty of improving execution time. Some
                    of these include generating local calling
                    convention entry points for exported func-
                    tions, further optimizing spill code, and
                    added analysis to improve instruction
                    scheduling.

               If the optimizer runs out of memory, it tries to
               recover by retrying the current procedure at a
               lower level of optimization and resumes subsequent
               procedures at the original level specified in the
               command-line option.

               If you optimize at -xO3 or -xO4 with very large
               procedures (thousands of lines of code in the same
               procedure), the optimizer may require a large
               amount of virtual memory.  In such cases, machine
               performance may degrade.

     -xP   Prints prototypes for K&R C function definitions.

     -xparallel
          (_S_P_A_R_C) Parallelizes loops both automatically (by the
          compiler) and explicitly (as specified by the program-
          mer). This option  is a macro and is equivalent to
          specifying all three of -xautopar, -xdepend, and
          -xexplicitpar.  With explicit parallelization, there is
          a risk of producing incorrect results.

          If optimization is not at -xO3 or higher, optimization
          is raised to -xO3 and a warning is issued.

          Avoid -xparallel if you do your own thread management.

          The Sun WorkShop includes the license required to use
          the multiprocessor C options.  To get faster code, use
          this option on a multiprocessor SPARC system. On a
          single-processor system, the generated code usually
          runs more slowly.

          If you compile and link in _o_n_e step, -xparallel links
          with the microtasking library and the threads-safe C
          runtime library.  If you compile and link in _s_e_p_a_r_a_t_e
          steps, and you compile with -xparallel, then link with
          -xparallel.




                  Last change: 15 November 1996                25






cc(1)                     User Commands                     cc(1)



     -xpentium
          (_I_n_t_e_l) Generates code for the Pentium processor.

     -xpg  Prepares the object code to collect data for profiling
          with gprof(1).  Invokes a runtime recording mechanism
          that produces a gmon.out file (at normal termination).

     -xprofile=_p
          Collects data for a profile or use a profile to optim-
          ize.

          (_S_P_A_R_C) _p must be collect[:_n_a_m_e], use[:_n_a_m_e], or tcov;
          (_I_n_t_e_l) (_P_o_w_e_r_P_C) _p must be tcov.

          This option causes execution frequency data to be col-
          lected and saved during execution, then the data can be
          used in subsequent runs to improve performance. This
          option is only valid when a level of optimization is
          specified.

          collect[:_n_a_m_e]
               Collects and saves execution frequency for later
               use by the optimizer with -xprofile=use. The com-
               piler generates code to measure statement execu-
               tion frequency.

               The _n_a_m_e is the name of the program that is being
               analyzed. This name is optional. If _n_a_m_e is not
               specified, a.out is assumed to be the name of the
               executable.

               At runtime, a program compiled with
               -xprofile=collect:_n_a_m_e will create the subdirec-
               tory _n_a_m_e.profile to hold the runtime feedback
               information. Data is written to the file feedback
               in this subdirectory. If you run the program
               several times, the execution frequency data accu-
               mulates in the feedback file; that is, output from
               prior runs is not lost.

          use[:_n_a_m_e]
               Uses execution frequency data to optimize strateg-
               ically. The _n_a_m_e is the name of the executable
               that is being analyzed. This name is optional. If
               _n_a_m_e is not specified, a.out is assumed to be the
               name of the executable.

               The program is optimized by using the execution
               frequency data previously generated and saved in
               the feedback files written by a previous execution
               of the program compiled with -xprofile=collect.




                  Last change: 15 November 1996                26






cc(1)                     User Commands                     cc(1)



               The source files and other compiler options must
               be exactly the same as those used for the compila-
               tion that created the compiled program that gen-
               erated the feedback file If compiled with -
               xprofile=collect:_n_a_m_e, the same program name _n_a_m_e
               must appear in the optimizing compilation: -
               xprofile=use:_n_a_m_e.

          tcov Basic block coverage analysis using "new" style
               tcov.

               The -xprofile=tcov option is the new style of
               basic block profiling for tcov. It has similar
               functionality to the -xa option, but correctly
               collects data for programs that have source code
               in header files.  See also -xa for information on
               the old style of prfiling, the tcov(1) man page,
               and the _P_e_r_f_o_r_m_a_n_c_e _P_r_o_f_i_l_i_n_g _T_o_o_l_s manual for
               more details.

               Code instrumentation is performed similarly to
               that of the -xa option, but .d files are no longer
               generated. instead, a single file is generated,
               the name of which is based on the final execut-
               able.  for example, if the program is run out of
               /foo/bar/myprog.profile, the data file is stored
               in /foo/bar/myprog.profile/myprog.tcovd.

               The -xprofile=tcov and the -xa options are compa-
               tible in a single executable, that is, you can
               link a program that contains some files that have
               been compiled with -xprofile=tcov, and others with
               -xa. You cannot compile a single file with both
               options.

               When running tcov, you must pass it the -x option
               to make it use the new style of data. If not, tcov
               uses the old .d files, if any, by default for
               data, and produces unexpected output.

               Unlike the -xa option, the TCOVDIR environment
               variable has no effect at compile-time. However,
               its value is used at program runtime.  See
               tcovf1(1) and the _P_e_r_f_o_r_m_a_n_c_e _P_r_o_f_i_l_i_n_g _T_o_o_l_s
               manual for more details.

     -xreduction
          (_S_P_A_R_C) Analyzes loops for reduction in automatic
          parallelization. This option is valid only if -xreduc-
          tion one of -xautopar or -xparallel is also specified.
          Otherwise the compiler issues a warning.




                  Last change: 15 November 1996                27






cc(1)                     User Commands                     cc(1)



          Parallelization options require a WorkShop license.

          When a reduction recognition is enabled, the compiler
          parallelizes reductions such as _d_o_t products, maximum
          and minimum finding. These reductions yield different
          roundoffs from those obtained by unparallelized code.

     -xregs=_r
          (_S_P_A_R_C) Specifies the usage of registers for the gen-
          erated code.

          _r is a comma-separated list that consists of one or
          more of the following: [no%]appl, [no%]float.

          Example: -xregs=appl,no%float

          The -xregs= values are:

          appl   Allows using the registers g2, g3, and g4.

          no%appl
                 Does not use the appl registers.

          float  Allows using the floating-point registers as
                 specified in the SPARC ABI.

          no%float
                 Does not use the floating-point registers.

          The default is:  -regs=appl,float.

     -xrestrict=_f
          (_S_P_A_R_C) Treats pointer-valued function parameters as
          restricted pointers. _f is a comma-separated list that
          consists of one or more function parameters, %all,
          %none.  This command-line option can be used on its
          own, but is best used with optimization of -xO3 or
          greater.

          The default is _%%%%_nnnn_oooo_nnnn_eeee. Specifying -xrestrict is
          equivalent to specifying -xrestrict=%all.

     -xs   Disables Auto-Read for dbx. Use this option in case
          you cannot keep the .o files around. It passes the -s
          option to the assembler.

          No Auto-Read is the older way of loading symbol tables.
          It places all symbol tables for dbx in the executable
          file. The linker links more slowly and dbx initializes
          more slowly.

          Auto-Read is the newer and default way of loading



                  Last change: 15 November 1996                28






cc(1)                     User Commands                     cc(1)



          symbol tables. With Auto-Read, the information is dis-
          tributed in the .o files, so that dbx loads the symbol
          table information only if and when it is needed. Hence,
          the linker links faster, and dbx initializes faster.

          With -xs, if you move the executables to another direc-
          tory, then to use dbx, you can ignore the object (.o)
          files.

          Without -xs, if you move the executables, you must move
          both the source files and the object (.o) files, or set
          the path with the dbx pathmap or use command.

     -xsafe=mem
          (_S_P_A_R_C) Allows the compiler to assume no memory-based
          traps occur.

          This option grants permission to use the speculative
          load instruction on V9 machines.

     -xsb  Generates data in the .sb(5) directory for the
          sbrowser(1) program, part of the SourceBrowser. This
          option is not valid with the _----_XXXX_ssss mode of the compiler.

     -xsbfast
          Generates data in the .sb(5) directory for the
          sbrowser(1) program, part of the SourceBrowser.  Does
          not compile source into an object file. This option is
          not valid with the _----_XXXX_ssss mode of the compiler.

     -xsfpconst
          Represents unsuffixed floating-point constants as sin-
          gle precision, instead of the default mode of double
          precision. Not valid with -Xc.

     -xspace
          Does no optimizations that increase code size. Does not
          parallelize loops if it increases code size.  Example:
          Does not unroll loops.

     -xstrconst
          Inserts string literals into the read-only data section
          of the text segment instead of the default data seg-
          ment.

     -xtarget=_t
          Specifies the target system for the instruction set and
          optimization.

          _t must be one of: native, generic, _s_y_s_t_e_m-_n_a_m_e.





                  Last change: 15 November 1996                29






cc(1)                     User Commands                     cc(1)



          The -xtarget option permits a quick and easy specifica-
          tion of the -xarch, -xchip, and -xcache combinations
          that occur on real systems.  The only meaning of -xtar-
          get is in its expansion.

          The -xtarget values are:

          native   Gets the best performance on the host system.

          generic  Gets the best performance for generic archi-
                   tecture, chip, and cache.  This is the
                   default.

          _s_y_s_t_e_m-_n_a_m_e
                   Get the best performance for the specified
                   system.
                   Valid system names on SPARC are:  sun4/15,
                   sun4/20, sun4/25, sun4/30, sun4/40, sun4/50,
                   sun4/60, sun4/65, sun4/75, sun4/110, sun4/150,
                   sun4/260, sun4/280, sun4/330, sun4/370,
                   sun4/390, sun4/470, sun4/490, sun4/630,
                   sun4/670, sun4/690, sselc, ssipc, ssipx, sslc,
                   sslt, sslx, sslx2, ssslc, ss1, ss1plus, ss2,
                   ss2p, ss4, ss5, ssvyger, ss10, ss10/hs11,
                   ss10/hs12, ss10/hs14, ss10/20, ss10/hs21,
                   ss10/hs22, ss10/30, ss10/40, ss10/41, ss10/50,
                   ss10/51, ss10/61, ss10/71, ss10/402, ss10/412,
                   ss10/512, ss10/514, ss10/612, ss10/712,
                   ss20/hs11, ss20/hs12, ss20/hs14, ss20/hs21,
                   ss20/hs22, ss20/51, ss20/61, ss20/71,
                   ss20/502, ss20/512, ss20/514, ss20/612,
                   ss20/712, ss600/41, ss600/51, ss600/61,
                   ss600/120, ss600/140, ss600/412, ss600/512,
                   ss600/514, ss600/612, ss1000, sc2000, cs6400,
                   solb5, solb6, ultra, ultra2, ultra1/140,
                   ultra1/170, ultra1/200, ultra2/1170,
                   ultra2/1200, ultra2/1300, ultra2/2170,
                   ultra2/2200, ultra2/2300, entr2, entr2/1170,
                   entr2/2170, entr2/1200, entr2/2200, entr150,
                   entr3000, entr4000, entr5000, entr6000.


          _O_n _I_n_t_e_l:
                   -xtarget= accepts

          o _gggg_eeee_nnnn_eeee_rrrr_iiii_cccc or _nnnn_aaaa_tttt_iiii_vvvv_eeee.

          o _3333_8888_6666 (equivalent to _----_3333_8888_6666 option) or
           486 (equivalent to _----_4444_8888_6666 option).

          o _pppp_eeee_nnnn_tttt_iiii_uuuu_mmmm (equivalent to _----_pppp_eeee_nnnn_tttt_iiii_uuuu_mmmm option) or
                   pentium_pro.



                  Last change: 15 November 1996                30






cc(1)                     User Commands                     cc(1)



          _o_n _P_o_w_e_r_P_C:
                   -xtarget= accepts _gggg_eeee_nnnn_eeee_rrrr_iiii_cccc or _nnnn_aaaa_tttt_iiii_vvvv_eeee.

          See the section on
                   -xtarget=_t in the _C _4._2 _U_s_e_r'_s _G_u_i_d_e for the -
                   xtarget expansions that show the mnemonic
                   encodings of the actual system names and
                   numbers.

          This option is a macro.  Each specific value for
          -xtarget expands into a specific set of values for the
          -xarch, -xchip, and -xcache options.  For example:
          -xtarget=sun4/15 is equivalent to:
          -xarch=v8a -xchip=micro -xcache=2/16/1

     -xtemp=_d_i_r
          Sets directory for temporary files used by _cccc_cccc to _d_i_r.
          No space is allowed within this option string. Without
          this option, temporary files go to _////_tttt_mmmm_pppp.  -xtemp has
          precedence over the TMPDIR environment variable.

     -xtime
          Reports the time and resources used by each compila-
          tion.

     -xtransition
          Issues warnings for differences between K&R C and ANSI
          C.

     -xunroll=_n
          Specifies whether or not the compiler optimizes
          (unrolls) loops.  _n is a positive integer.  When _n is
          1, it is a command and the compiler unrolls no loops.
          When _n is greater than 1, -xunroll=_n merely suggests to
          the compiler that it unroll loops _n times.

     -xvpara
          (_S_P_A_R_C) Issues warnings about loops that have _####_pppp_rrrr_aaaa_gggg_mmmm_aaaa
          _MMMM_PPPP directives specified when the loop may not be prop-
          erly specified for parallelization.  For example, when
          the compiler detects data dependencies between loop
          iterations, it issues a warning.

          Use the -xexplicitpar or the -xparallel option and the
          #pragma MP directive.

          The Sun WorkShop includes the license required to use
          multiprocessor C options.

     -Y_c, _d_i_r
          Specifies a new directory _d_i_r for the location of com-
          ponent _c.  _c can consist of any of the characters



                  Last change: 15 November 1996                31






cc(1)                     User Commands                     cc(1)



          representing tools listed under the -W option.

          If the location of a tool is being specified, then the
          new path name for the tool will be _d_i_r_////_t_o_o_l.  If more
          than one  _----_YYYY  option is applied to any one item, then
          the last occurrence holds.

     -YA, _d_i_r
          Specifies a directory _d_i_r to search for all compiler
          components.  If a component is not found in _d_i_r, the
          search reverts to the directory where the compiler is
          installed.

     -YI, _d_i_r
          Changes default directory searched for _iiii_nnnn_cccc_llll_uuuu_dddd_eeee files.

     -YP, _d_i_r
          Changes default directory for finding libraries files.

     -YS, _d_i_r
          Changes default directory for startup object files.

     -Zll  (_S_P_A_R_C) Creates the lock_lint database files (.ll
          files), one per each .c file compiled for the
          lock_lint(1) program, which is included in the iMPact
          product. Does not actually compile.

     -Zlp  (_S_P_A_R_C) Prepares object files for the loop profiler,
          looptool. The looptool(1) utility can then be run to
          generate loop statistics about the program. Use this
          option with -xdepend; if -xdepend is not explicitly or
          implicitly specified, turns on -xdepend and issues a
          warning. If optimization is not at _----_xxxx_OOOO_3333 or higher,
          optimization is raised to _----_xxxx_OOOO_3333 and a warning is issued.

          The Sun WorkShop includes the license required to use
          the MPC options.

     -Ztha
          (_S_P_A_R_C) Prepares code for analysis by the thread
          analyzer, the performance analysis tool for mul-
          tithreaded code.

     _cccc_cccc recognizes _----_aaaa, _----_eeee, _----_rrrr, _----_tttt, _----_uuuu, and _----_zzzz and passes these
     options and their arguments to _llll_dddd.  _cccc_cccc also passes any
     unrecognized options to _llll_dddd with a warning.

  PRAGMAS
     The following #pragmas are recognized by the compilation
     system:
     #pragma align, #pragma fini, #pragma init, #pragma ident,
     #pragma int_to_unsigned, (_S_P_A_R_C) #pragma MP serial_loop,



                  Last change: 15 November 1996                32






cc(1)                     User Commands                     cc(1)



     #pragma MP serial_loop_nested, (_S_P_A_R_C) #pragma MP taskloop,
     (_S_P_A_R_C) #pragma nomemorydepend, (_S_P_A_R_C) #pragma
     no_side_effect, #pragma pack, (_S_P_A_R_C) #pragma pipeloop,
     #pragma redefine_extname, #pragma unknown_control_flow,
     (_S_P_A_R_C) #pragma unroll, #pragma weak.

     Refer to the _C _U_s_e_r'_s _G_u_i_d_e for more information on these
     pragmas.

ENVIRONMENT
     TMPDIR    cc normally creates temporary files in the direc-
               tory /tmp.  You may specify another directory by
               setting the environment variable TMPDIR to your
               chosen directory.  (If TMPDIR isn't a valid direc-
               tory, then cc will use /tmp).  The -xtemp option
               has precedence over the TMPDIR environment vari-
               able.

     SUNPRO_SB_INIT_FILE_NAME
               The absolute path name of the directory containing
               the .sbinit(5) file.  This variable is used only
               if the -xsb or -xsbfast flag is used.

FILES
     a.out                              executable output file
     _f_i_l_e.a                             library of object files
     _f_i_l_e.c                             C source file
     _f_i_l_e.d                             tcov(1) test coverage
                                        input file
     _f_i_l_e.i                             C source file after
                                        preprocessing
     _f_i_l_e.il                            inline(1) expansion file
     _f_i_l_e.o                             object file
     _f_i_l_e.s                             assembler source file
     _f_i_l_e.tcov                          output from tcov(1)
     acomp                              compiler front end
     cc                                 compiler command line
                                        driver
     cg                                 code generator
     crt1.o                             runtime startup code
     crti.o                             runtime startup code
     crtn.o                             runtime startup code
     fbe                                assembler
     gcrt1.o                            startup for profiling
                                        with gprof(1)
     gmon.out                           default profile file for
                                        _----_xxxx_pppp_gggg
     iropt                              global optimizer
     mcrt1.o                            start-up for profiling
                                        with prof(1) and intro(3)
     mon.out                            default profile file for
                                        _----_pppp



                  Last change: 15 November 1996                33






cc(1)                     User Commands                     cc(1)



     .sb                                The directory used to
                                        store sbrowser(1) data
                                        when the -xsb or -xsbfast
                                        flag is used.
     .sbinit                            A file containing com-
                                        mands which can be used
                                        to specify the location
                                        of the .sb directory and
                                        to control the execution
                                        of sbcleanup
     sbcleanup                          deletes obsolete files in
                                        the .sb directory and
                                        creates an up-to-date
                                        .sb/Index file

SEE ALSO
     as(1), dbx(1), ild(1), ld(1), lint(1), prof(1), sbrowser(1),
     .sb(5), .sbinit(5), tmpnam(3S)
     The _C _U_s_e_r'_s _G_u_i_d_e.
     _M_a_k_i_n_g _t_h_e _T_r_a_n_s_i_t_i_o_n _t_o _A_N_S_I _C.
     _I_n_c_r_e_m_e_n_t_a_l _L_i_n_k _E_d_i_t_o_r (_i_l_d) manual
     American National Standard for Programming Language--C,
     ANSI/ISO 9899-1990.

ONLINE DOCUMENTATION
     AnswerBook:
          A script has been provided to automatically setup your
          environment to view the available WorkShop and compiler
          manuals.

          Type the following at a command prompt:

                workshop-answerbooks

          The script sets the AB_CARDCATALOG environment variable
          and starts /usr/openwin/bin/answerbook.

          When the AnswerBook Navigator opens, add the WorkShop
          and and compiler manuals to your doc library by using
          the "Modify Library" button.

          (For more information on running AnswerBook, see the
          answerbook(1) man page.)


     HTML:
          HTML versions of the WorkShop and compiler manuals have
          also been provided. These may be viewed with any HTML
          browser capable of displaying tables (HTML 3.0).

          Point your browser to the URL:
          file:/opt/SUNWspro/DOC4.0/lib/locale/C/html_docs/index.html



                  Last change: 15 November 1996                34






cc(1)                     User Commands                     cc(1)























































                  Last change: 15 November 1996                35






