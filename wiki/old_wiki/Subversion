Date: Fri, 7 Jul 2006 15:30:45 -0400
Mime-Version: 1.0 (Produced by PhpWiki 1.3.11)
Content-Type: multipart/mixed;
  boundary="=_multipart_boundary_16"

--=_multipart_boundary_16
Content-Type: application/x-phpwiki;
  pagename=Subversion;
  flags="";
  author=sosentos;
  version=15;
  lastmodified=1152300645;
  author_id=sosentos;
  markup=2;
  hits=42;
  charset=utf-8
Content-Transfer-Encoding: binary

!!! Subversion?

[Subversion | http://subversion.tigris.org] is open-source versioning software. The project is funded by [CollabNet | http://www.collab.net]. They hold the copyright to the code, but that copyright is [an Apache/BSD-style license | http://subversion.tigris.org/project_license.html] which is fully compliant with the [Debian Free Software Guidelines | http://www.debian.org/social_contract#guidelines].

Using versioning software to organize your coding projects will allow you to keep a record of every change ever made, work on the same code at different machines, and share your code with other members of the lab, and so it is highly recommended that you use Subversion for all of your coding projects.

A good starting point for learning how to use Subversion is this page. This page is especially important for ALL members, as all of the directions listed here are specific to you. The full guide to using Subversion can be found in [Version Control with Subversion | http://svnbook.red-bean.com/].

!!! Creating a Project

When creating a project, it is important to distinguish between a project group and a subproject, which belongs to one of the following project groups:
* motor_control
* imrl
* rpi

!! Creating a Project Group

First create the tree structure for the new project group:

<verbatim>
  > mkdir mytree
  > mkdir mytree/trunk
  > mkdir mytree/tags
  > mkdir mytree/branches
</verbatim>

Then import the tree to the repository:

<verbatim>
  > svn import mytree svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfProjectGroup --mesage "Initial import"
</verbatim>

You can now delete the tree structure that you created:

<verbatim>
  > rm -r mytree
</verbatim>

And finally, add the name of the new project group to the list on this page.

!! Creating a Subproject

First make sure that you have the newest version of the project group to which your project belongs checked out:

<verbatim>
  > mkdir NameOfProjectGroup
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfProjectGroup/trunk NameOfProjectGroup
</verbatim>

or

<verbatim>
  > cd NameOfProjectGroup
  > svn update
</verbatim>

Next, create a directory for your subproject:

<verbatim>
  > mkdir NameOfProjectGroup/NameOfSubproject
</verbatim>

Then create all of the directories and files for the subproject within that directory, and add the subproject to the repository:

<verbatim>
  > cd NameOfProjectGroup
  > svn add NameOfSubproject
  > svn commit --message "Added subproject NameOfSubproject"
</verbatim>

Note that you only need to issue one "svn add" command, as "svn add" is recursive.

!!! Obtaining a Working Copy

To obtain a copy of all of the code for a main project:

<verbatim>
  > mkdir NameOfMainProject
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfMainProject/trunk NameOfProject
</verbatim>

To obtain a copy of all of the code for a subproject:

<verbatim>
  > mkdir NameOfMainProject
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfMainProject/trunk/NameOfSubproject NameOfMainProject
</verbatim>

!!! Updating Your Code

Before starting work on a project, it is a good idea to ensure that you have the most recent copy of the code:

<verbatim>
  > cd path/to/project
  > svn update
</verbatim>

!!! Changing Code

After ensuring that you have the most recent copy of the code, you can make changes to the code, either by altering existing files, creating new files or creating new directories. If you create a new file or a new directory within an existing project, make sure to add the file or directory to the repository:

<verbatim>
  > svn add path/to/file/or/directory
</verbatim>

You can also alter a project by deleting, copying or renaming a file or directory:

<verbatim>
  > svn delete path/to/file/or/directory
  > svn copy path/to/file/or/directory path/to/the/copy
  > svn move old/path/to/file/or/direcotry new/path/to/file/or/directory
</verbatim>

Please note that no changes will take effect until they are committed.

!!! Examining Changes

Before committing changes, it is a good idea to inspect what changes you have made. In this way, you can be sure to include accurate log messages. To see which files/directories have changed:

<verbatim>
  > svn status
</verbatim>

To see what changes have been made:

<verbatim>
  > svn diff
</verbatim>

To revert all changes in your working copy:

<verbatim>
  > svn revert
</verbatim>

Each of these commands can be applied to specific files/directories simply by adding the name of the file/directory as the last input parameter. Also, unlike most subversion commands, these three commands are not dependent on a working internet connection.

!!! Resolving Conflicts

If you are collaborating on a project with other members of the lab, you should always update your code with the "svn update" command before commiting your changes. Sometimes changes that you have made to your code will conflict with changes committed by another person working on the project. In this case, conflicting files will be marked by a trailing "C" during the update process. If this happens, you will need to resolve the conflict. When a conflict is recognized in a file ( e.g. file.txt), three new files will be created: file.txt.mine, file.txt.rOldRevisionNumber, file.rNewRevisionNumber. You can resolve conflicts by copying one of these files over the original file, by running "svn revert file.txt" or by hand using a text editor and the original file. Once you have resolved the changes by one of these methods:

<verbatim>
  > svn resolve path/to/file
</verbatim>

!!! Committing Changes

Having made changes to current code, and resolved all conflicts, you can commit the new version of the code to the repository:

<verbatim>
  > svn commit
</verbatim>

!!! Additional Information

* The subversion repository is located on entropy in the directory /nfs/entropy/u1/svn/repository.
* You can access the repository using the svn+ssh protocol, or the file protocol. Please use only the svn+ssh protocol, as the file protocol is not recommended for networked disks.
* You will need to use the same username/password as you do for logging in to ALL machines when accessing the repository. If you tire of typing your password each time that you enter a subversion command, you can create and use a [SSH key pair | http://www.puddingonline.com/~dave/publications/SSH-with-Keys-HOWTO/document/html-one-page/SSH-with-Keys-HOWTO.html] to authenticate your system.
* The repository is group readable/writeable for group "anw". If you do not belong to this group, you will not be able to access the repository. You can check this by using the command line tool "groups". Please talk to Sarah Osentoski if you are not in group "anw".
* There are subversion [packages | http://subversion.tigris.org/project_packages.html] available for many different operating systems, including [Macintosh OSX | http://metissian.com/projects/macosx/subversion/] and [Windows | http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91].

--=_multipart_boundary_16
Content-Type: application/x-phpwiki;
  pagename=Subversion;
  flags="";
  author=colinb;
  version=14;
  lastmodified=1125354842;
  author_id=colinb;
  markup=2;
  hits=42;
  charset=utf-8
Content-Transfer-Encoding: binary

!!! Subversion?

[Subversion | http://subversion.tigris.org] is open-source versioning software. The project is funded by [CollabNet | http://www.collab.net]. They hold the copyright to the code, but that copyright is [an Apache/BSD-style license | http://subversion.tigris.org/project_license.html] which is fully compliant with the [Debian Free Software Guidelines | http://www.debian.org/social_contract#guidelines].

Using versioning software to organize your coding projects will allow you to keep a record of every change ever made, work on the same code at different machines, and share your code with other members of the lab, and so it is highly recommended that you use Subversion for all of your coding projects.

A good starting point for learning how to use Subversion is this page. This page is especially important for ALL members, as all of the directions listed here are specific to you. The full guide to using Subversion can be found in [Version Control with Subversion | http://svnbook.red-bean.com/].

!!! Creating a Project

When creating a project, it is important to distinguish between a project group and a subproject, which belongs to one of the following project groups:
* motor_control
* imrl

!! Creating a Project Group

First create the tree structure for the new project group:

<verbatim>
  > mkdir mytree
  > mkdir mytree/trunk
  > mkdir mytree/tags
  > mkdir mytree/branches
</verbatim>

Then import the tree to the repository:

<verbatim>
  > svn import mytree svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfProjectGroup --mesage "Initial import"
</verbatim>

You can now delete the tree structure that you created:

<verbatim>
  > rm -r mytree
</verbatim>

And finally, add the name of the new project group to the list on this page.

!! Creating a Subproject

First make sure that you have the newest version of the project group to which your project belongs checked out:

<verbatim>
  > mkdir NameOfProjectGroup
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfProjectGroup/trunk NameOfProjectGroup
</verbatim>

or

<verbatim>
  > cd NameOfProjectGroup
  > svn update
</verbatim>

Next, create a directory for your subproject:

<verbatim>
  > mkdir NameOfProjectGroup/NameOfSubproject
</verbatim>

Then create all of the directories and files for the subproject within that directory, and add the subproject to the repository:

<verbatim>
  > cd NameOfProjectGroup
  > svn add NameOfSubproject
  > svn commit --message "Added subproject NameOfSubproject"
</verbatim>

Note that you only need to issue one "svn add" command, as "svn add" is recursive.

!!! Obtaining a Working Copy

To obtain a copy of all of the code for a main project:

<verbatim>
  > mkdir NameOfMainProject
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfMainProject/trunk NameOfProject
</verbatim>

To obtain a copy of all of the code for a subproject:

<verbatim>
  > mkdir NameOfMainProject
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfMainProject/trunk/NameOfSubproject NameOfMainProject
</verbatim>

!!! Updating Your Code

Before starting work on a project, it is a good idea to ensure that you have the most recent copy of the code:

<verbatim>
  > cd path/to/project
  > svn update
</verbatim>

!!! Changing Code

After ensuring that you have the most recent copy of the code, you can make changes to the code, either by altering existing files, creating new files or creating new directories. If you create a new file or a new directory within an existing project, make sure to add the file or directory to the repository:

<verbatim>
  > svn add path/to/file/or/directory
</verbatim>

You can also alter a project by deleting, copying or renaming a file or directory:

<verbatim>
  > svn delete path/to/file/or/directory
  > svn copy path/to/file/or/directory path/to/the/copy
  > svn move old/path/to/file/or/direcotry new/path/to/file/or/directory
</verbatim>

Please note that no changes will take effect until they are committed.

!!! Examining Changes

Before committing changes, it is a good idea to inspect what changes you have made. In this way, you can be sure to include accurate log messages. To see which files/directories have changed:

<verbatim>
  > svn status
</verbatim>

To see what changes have been made:

<verbatim>
  > svn diff
</verbatim>

To revert all changes in your working copy:

<verbatim>
  > svn revert
</verbatim>

Each of these commands can be applied to specific files/directories simply by adding the name of the file/directory as the last input parameter. Also, unlike most subversion commands, these three commands are not dependent on a working internet connection.

!!! Resolving Conflicts

If you are collaborating on a project with other members of the lab, you should always update your code with the "svn update" command before commiting your changes. Sometimes changes that you have made to your code will conflict with changes committed by another person working on the project. In this case, conflicting files will be marked by a trailing "C" during the update process. If this happens, you will need to resolve the conflict. When a conflict is recognized in a file ( e.g. file.txt), three new files will be created: file.txt.mine, file.txt.rOldRevisionNumber, file.rNewRevisionNumber. You can resolve conflicts by copying one of these files over the original file, by running "svn revert file.txt" or by hand using a text editor and the original file. Once you have resolved the changes by one of these methods:

<verbatim>
  > svn resolve path/to/file
</verbatim>

!!! Committing Changes

Having made changes to current code, and resolved all conflicts, you can commit the new version of the code to the repository:

<verbatim>
  > svn commit
</verbatim>

!!! Additional Information

* The subversion repository is located on entropy in the directory /nfs/entropy/u1/svn/repository.
* You can access the repository using the svn+ssh protocol, or the file protocol. Please use only the svn+ssh protocol, as the file protocol is not recommended for networked disks.
* You will need to use the same username/password as you do for logging in to ALL machines when accessing the repository. If you tire of typing your password each time that you enter a subversion command, you can create and use a [SSH key pair | http://www.puddingonline.com/~dave/publications/SSH-with-Keys-HOWTO/document/html-one-page/SSH-with-Keys-HOWTO.html] to authenticate your system.
* The repository is group readable/writeable for group "anw". If you do not belong to this group, you will not be able to access the repository. You can check this by using the command line tool "groups". Please talk to Sarah Osentoski if you are not in group "anw".
* There are subversion [packages | http://subversion.tigris.org/project_packages.html] available for many different operating systems, including [Macintosh OSX | http://metissian.com/projects/macosx/subversion/] and [Windows | http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91].

--=_multipart_boundary_16
Content-Type: application/x-phpwiki;
  pagename=Subversion;
  flags="";
  author=colinb;
  version=13;
  lastmodified=1125354566;
  author_id=colinb;
  markup=2;
  hits=42;
  charset=utf-8
Content-Transfer-Encoding: binary

!!! Subversion?

[Subversion | http://subversion.tigris.org] is open-source versioning software. The project is funded by [CollabNet | http://www.collab.net]. They hold the copyright to the code, but that copyright is [an Apache/BSD-style license | http://subversion.tigris.org/project_license.html] which is fully compliant with the [Debian Free Software Guidelines | http://www.debian.org/social_contract#guidelines].

Using versioning software to organize your coding projects will allow you to keep a record of every change ever made, work on the same code at different machines, and share your code with other members of the lab, and so it is highly recommended that you use Subversion for all of your coding projects.

A good starting point for learning how to use Subversion is this page. This page is especially important for ALL members, as all of the directions listed here are specific to you. The full guide to using Subversion can be found in [Version Control with Subversion | http://svnbook.red-bean.com/].

!!! Creating a Project

When creating a project, it is important to distinguish between a project group and a subproject, which belongs to one of the following project groups:
* motor_control
* imrl

!! Creating a Project Group

First create the tree structure for the new project group:

<verbatim>
  > mkdir mytree
  > mkdir mytree/trunk
  > mkdir mytree/tags
  > mkdir mytree/branches
</verbatim>

Then import the tree to the repository:

<verbatim>
  > svn import mytree svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfProjectGroup --mesage "Initial import"
</verbatim>

You can now delete the tree structure that you created:

<verbatim>
  > rm -r mytree
</verbatim>

And finally, add the name of the new project group to the list on this page.

!! Creating a Subproject

First make sure that you have the newest version of the project group to which your project belongs checked out:

<verbatim>
  > mkdir NameOfProjectGroup
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfProjectGroup/trunk NameOfProjectGroup
</verbatim>

or

<verbatim>
  > cd NameOfProjectGroup
  > svn update
</verbatim>

Next, create a directory for your subproject:

<verbatim>
  > mkdir NameOfProjectGroup/NameOfSubproject
</verbatim>

Then create all of the directories and files for the subproject within that directory, and add the subproject to the repository:

<verbatim>
  > cd NameOfProjectGroup
  > svn add NameOfSubproject
  > svn commit --message "Added subproject NameOfSubproject"
</verbatim>

Note that you only need to issue one "svn add" command, as "svn add" is recursive.

!!! Obtaining a Working Copy

To obtain a copy of all of the code for a main project:

<verbatim>
  > mkdir NameOfMainProject
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfMainProject/trunk NameOfProject
</verbatim>

To obtain a copy of all of the code for a subproject:

<verbatim>
  > mkdir NameOfMainProject
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfMainProject/trunk/NameOfSubproject NameOfMainProject
</verbatim>

!!! Updating Your Code

Before starting work on a project, it is a good idea to ensure that you have the most recent copy of the code:

<verbatim>
  > cd path/to/project
  > svn update
</verbatim>

!!! Changing Code

After ensuring that you have the most recent copy of the code, you can make changes to the code, either by altering existing files, creating new files or creating new directories. If you create a new file or a new directory within an existing project, make sure to add the file or directory to the repository:

<verbatim>
  > svn add path/to/file/or/directory
</verbatim>

You can also alter a project by deleting, copying or renaming a file or directory:

<verbatim>
  > svn delete path/to/file/or/directory
  > svn copy path/to/file/or/directory path/to/the/copy
  > svn move old/path/to/file/or/direcotry new/path/to/file/or/directory
</verbatim>

Please note that no changes will take effect until they are committed.

!!! Examining Changes

Before committing changes, it is a good idea to inspect what changes you have made. In this way, you can be sure to include accurate log messages. To see which files/directories have changed:

<verbatim>
  > svn status
</verbatim>

To see what changes have been made:

<verbatim>
  > svn diff
</verbatim>

To revert all changes in your working copy:

<verbatim>
  > svn revert
</verbatim>

Each of these commands can be applied to specific files/directories simply by adding the name of the file/directory as the last input parameter. Also, unlike most subversion commands, these three commands are not dependent on a working internet connection.

!!! Resolving Conflicts

If you are collaborating on a project with other members of the lab, you should always update your code with the "svn update" command before commiting your changes. Sometimes changes that you have made to your code will conflict with changes committed by another person working on the project. In this case, conflicting files will be marked by a trailing "C" during the update process. If this happens, you will need to resolve the conflict. When a conflict is recognized in a file ( e.g. file.txt), three new files will be created: file.txt.mine, file.txt.rOldRevisionNumber, file.rNewRevisionNumber. You can resolve conflicts by copying one of these files over the original file, by running "svn revert file.txt" or by hand using a text editor and the original file. Once you have resolved the changes by one of these methods:

<verbatim>
  > svn resolve path/to/file
</verbatim>

!!! Committing Changes

Having made changes to current code, and resolved all conflicts, you can commit the new version of the code to the repository:

<verbatim>
  > svn commit
</verbatim>

!!! Additional Information

* The subversion repository is located on entropy in the directory /nfs/entropy/u1/svn/repository.
* You can access the repository using the svn+ssh protocol, or the file protocol. Please use only the svn+ssh protocol, as the file protocol is not recommended for networked disks.
* You will need to use the same username/password as you do for logging in to ALL machines when accessing the repository.
* If you tire of typing your password each time that you enter a subversion command, you can create and use a [SSH key pair | http://www.puddingonline.com/~dave/publications/SSH-with-Keys-HOWTO/document/html-one-page/SSH-with-Keys-HOWTO.html] to authenticate your system.
* The repository is group readable/writeable for group "anw". If you do not belong to this group, you will not be able to access the repository. You can check this by using the command line tool "groups". Please talk to Sarah Osentoski if you are not in group "anw".
* There are subversion [packages | http://subversion.tigris.org/project_packages.html] available for many different operating systems, including [Macintosh OSX | http://metissian.com/projects/macosx/subversion/] and [Windows | http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91].

--=_multipart_boundary_16
Content-Type: application/x-phpwiki;
  pagename=Subversion;
  flags="";
  author=colinb;
  version=12;
  lastmodified=1125354445;
  author_id=colinb;
  markup=2;
  hits=42;
  charset=utf-8
Content-Transfer-Encoding: binary

!!! Subversion?

[Subversion | http://subversion.tigris.org] is open-source versioning software. The project is funded by [CollabNet | http://www.collab.net]. They hold the copyright to the code, but that copyright is [an Apache/BSD-style license | http://subversion.tigris.org/project_license.html] which is fully compliant with the [Debian Free Software Guidelines | http://www.debian.org/social_contract#guidelines].

Using versioning software to organize your coding projects will allow you to keep a record of every change ever made, work on the same code at different machines, and share your code with other members of the lab, and so it is highly recommended that you use Subversion for all of your coding projects.

A good starting point for learning how to use Subversion is this page. This page is especially important for ALL members, as all of the directions listed here are specific to you. The full guide to using Subversion can be found in [Version Control with Subversion | http://svnbook.red-bean.com/].

!!! Creating a Project

When creating a project, it is important to distinguish between a project group and a subproject, which belongs to one of the following project groups:
* motor_control
* imrl

!! Creating a Project Group

First create the tree structure for the new project group:

<verbatim>
  > mkdir mytree
  > mkdir mytree/trunk
  > mkdir mytree/tags
  > mkdir mytree/branches
</verbatim>

Then import the tree to the repository:

<verbatim>
  > svn import mytree svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfProjectGroup --mesage "Initial import"
</verbatim>

You can now delete the tree structure that you created:

<verbatim>
  > rm -r mytree
</verbatim>

And finally, add the name of the new project group to the list on this page.

!! Creating a Subproject

First make sure that you have the newest version of the project group to which your project belongs checked out:

<verbatim>
  > mkdir NameOfProjectGroup
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfProjectGroup/trunk NameOfProjectGroup
</verbatim>

or

<verbatim>
  > cd NameOfProjectGroup
  > svn update
</verbatim>

Next, create a directory for your subproject:

<verbatim>
  > mkdir NameOfProjectGroup/NameOfSubproject
</verbatim>

Then create all of the directories and files for the subproject within that directory, and add the subproject to the repository:

<verbatim>
  > cd NameOfProjectGroup
  > svn add NameOfSubproject
  > svn commit --message "Added subproject NameOfSubproject"
</verbatim>

Note that you only need to issue one "svn add" command, as "svn add" is recursive.

!!! Obtaining a Working Copy

To obtain a copy of all of the code for a main project:

<verbatim>
  > mkdir NameOfMainProject
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfMainProject/trunk NameOfProject
</verbatim>

To obtain a copy of all of the code for a subproject:

<verbatim>
  > mkdir NameOfMainProject
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfMainProject/trunk/NameOfSubproject NameOfMainProject
</verbatim>

!!! Updating Your Code

Before starting work on a project, it is a good idea to ensure that you have the most recent copy of the code:

<verbatim>
  > cd path/to/project
  > svn update
</verbatim>

!!! Changing Code

After ensuring that you have the most recent copy of the code, you can make changes to the code, either by altering existing files, creating new files or creating new directories. If you create a new file or a new directory within an existing project, make sure to add the file or directory to the repository:

<verbatim>
  > svn add path/to/file/or/directory
</verbatim>

You can also alter a project by deleting, copying or renaming a file or directory:

<verbatim>
  > svn delete path/to/file/or/directory
  > svn copy path/to/file/or/directory path/to/the/copy
  > svn move old/path/to/file/or/direcotry new/path/to/file/or/directory
</verbatim>

Please note that no changes will take effect until they are committed.

!!! Examining Changes

Before committing changes, it is a good idea to inspect what changes you have made. In this way, you can be sure to include accurate log messages. To see which files/directories have changed:

<verbatim>
  > svn status
</verbatim>

To see what changes have been made:

<verbatim>
  > svn diff
</verbatim>

To revert all changes in your working copy:

<verbatim>
  > svn revert
</verbatim>

Each of these commands can be applied to specific files/directories simply by adding the name of the file/directory as the last input parameter. Also, unlike most subversion commands, these three commands are not dependent on a working internet connection.

!!! Resolving Conflicts

If you are collaborating on a project with other members of the lab, you should always update your code with the "svn update" command before commiting your changes. Sometimes changes that you have made to your code will conflict with changes committed by another person working on the project. In this case, conflicting files will be marked by a trailing "C" during the update process. If this happens, you will need to resolve the conflict. When a conflict is recognized in a file ( e.g. file.txt), three new files will be created: file.txt.mine, file.txt.rOldRevisionNumber, file.rNewRevisionNumber. You can resolve conflicts by copying one of these files over the original file, by running "svn revert file.txt" or by hand using a text editor and the original file. Once you have resolved the changes by one of these methods:

<verbatim>
  > svn resolve path/to/file
</verbatim>

!!! Committing Changes

Having made changes to current code, and resolved all conflicts, you can commit the new version of the code to the repository:

<verbatim>
  > svn commit
</verbatim>

!!! Additional Information

* The subversion repository is located on entropy in the directory /nfs/entropy/u1/svn/repository.
* You can access the repository using the svn+ssh protocol, or the file protocol. Please use only the svn+ssh protocol, as the file protocol is not recommended for networked disks.
* You will need to use the same username/password as you do for logging in to ALL machines when accessing the repository.
* If you tire of typing your password each time that you enter a subversion command, you can create and use a [SSH key pair | http://www.puddingonline.com/~dave/publications/SSH-with-Keys-HOWTO/document/html-one-page/SSH-with-Keys-HOWTO.html] to authenticate your system.
* The repository is group readable/writeable for group "anw". If you do not belong to this group, you will not be able to access the repository. You can check this by using the command line tool "groups". Please talk to Sarah Osentoski if you are not in group "anw".
* There are subversion [clients | http://subversion.tigris.org/project_packages.html] available for many different operating systems, including [Macintosh OSX | http://metissian.com/projects/macosx/subversion/] and [Windows | http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91].

--=_multipart_boundary_16
Content-Type: application/x-phpwiki;
  pagename=Subversion;
  flags="";
  author=colinb;
  version=11;
  lastmodified=1125353882;
  author_id=colinb;
  markup=2;
  hits=42;
  charset=utf-8
Content-Transfer-Encoding: binary

!!! Subversion?

[Subversion | http://subversion.tigris.org] is open-source versioning software. The project is funded by [CollabNet | http://www.collab.net]. They hold the copyright to the code, but that copyright is [an Apache/BSD-style license | http://subversion.tigris.org/project_license.html] which is fully compliant with the [Debian Free Software Guidelines | http://www.debian.org/social_contract#guidelines].

Using versioning software to organize your coding projects will allow you to keep a record of every change ever made, work on the same code at different machines, and share your code with other members of the lab, and so it is highly recommended that you use Subversion for all of your coding projects.

A good starting point for learning how to use Subversion is this page. This page is especially important for ALL members, as all of the directions listed here are specific to you. The full guide to using Subversion can be found in [Version Control with Subversion | http://svnbook.red-bean.com/].

!!! Creating a Project

When creating a project, it is important to distinguish between a project group and a subproject, which belongs to one of the following project groups:
* motor_control
* imrl

!! Creating a Project Group

First create the tree structure for the new project group:

<verbatim>
  > mkdir mytree
  > mkdir mytree/trunk
  > mkdir mytree/tags
  > mkdir mytree/branches
</verbatim>

Then import the tree to the repository:

<verbatim>
  > svn import mytree svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfProjectGroup --mesage "Initial import"
</verbatim>

You can now delete the tree structure that you created:

<verbatim>
  > rm -r mytree
</verbatim>

And finally, add the name of the new project group to the list on this page.

!! Creating a Subproject

First make sure that you have the newest version of the project group to which your project belongs checked out:

<verbatim>
  > mkdir NameOfProjectGroup
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfProjectGroup/trunk NameOfProjectGroup
</verbatim>

or

<verbatim>
  > cd NameOfProjectGroup
  > svn update
</verbatim>

Next, create a directory for your subproject:

<verbatim>
  > mkdir NameOfProjectGroup/NameOfSubproject
</verbatim>

Then create all of the directories and files for the subproject within that directory, and add the subproject to the repository:

<verbatim>
  > cd NameOfProjectGroup
  > svn add NameOfSubproject
  > svn commit --message "Added subproject NameOfSubproject"
</verbatim>

Note that you only need to issue one "svn add" command, as "svn add" is recursive.

!!! Obtaining a Working Copy

To obtain a copy of all of the code for a main project:

<verbatim>
  > mkdir NameOfMainProject
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfMainProject/trunk NameOfProject
</verbatim>

To obtain a copy of all of the code for a subproject:

<verbatim>
  > mkdir NameOfMainProject
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfMainProject/trunk/NameOfSubproject NameOfMainProject
</verbatim>

!!! Updating Your Code

Before starting work on a project, it is a good idea to ensure that you have the most recent copy of the code:

<verbatim>
  > cd path/to/project
  > svn update
</verbatim>

!!! Changing Code

After ensuring that you have the most recent copy of the code, you can make changes to the code, either by altering existing files, creating new files or creating new directories. If you create a new file or a new directory within an existing project, make sure to add the file or directory to the repository:

<verbatim>
  > svn add path/to/file/or/directory
</verbatim>

You can also alter a project by deleting, copying or renaming a file or directory:

<verbatim>
  > svn delete path/to/file/or/directory
  > svn copy path/to/file/or/directory path/to/the/copy
  > svn move old/path/to/file/or/direcotry new/path/to/file/or/directory
</verbatim>

Please note that no changes will take effect until they are committed.

!!! Examining Changes

Before committing changes, it is a good idea to inspect what changes you have made. In this way, you can be sure to include accurate log messages. To see which files/directories have changed:

<verbatim>
  > svn status
</verbatim>

To see what changes have been made:

<verbatim>
  > svn diff
</verbatim>

To revert all changes in your working copy:

<verbatim>
  > svn revert
</verbatim>

Each of these commands can be applied to specific files/directories simply by adding the name of the file/directory as the last input parameter. Also, unlike most subversion commands, these three commands are not dependent on a working internet connection.

!!! Resolving Conflicts

If you are collaborating on a project with other members of the lab, you should always update your code with the "svn update" command before commiting your changes. Sometimes changes that you have made to your code will conflict with changes committed by another person working on the project. In this case, conflicting files will be marked by a trailing "C" during the update process. If this happens, you will need to resolve the conflict. When a conflict is recognized in a file ( e.g. file.txt), three new files will be created: file.txt.mine, file.txt.rOldRevisionNumber, file.rNewRevisionNumber. You can resolve conflicts by copying one of these files over the original file, by running "svn revert file.txt" or changes can be resolved by hand using a text editor and the original file. Having resolved changes:

<verbatim>
  > svn resolve path/to/file
</verbatim>

!!! Committing Changes

Having made changes to current code, and resolved all conflicts, you can commit the new version of the code to the repository:

<verbatim>
  > svn commit
</verbatim>

!!! Additional Information

* The subversion repository is located on entropy in the directory /nfs/entropy/u1/svn/repository.
* You can access the repository using the svn+ssh protocol, or the file protocol. Please use only the svn+ssh protocol, as the file protocol is not recommended for networked disks.
* You will need to use the same username/password as you do for logging in to ALL machines when accessing the repository.
* If you tire of typing your password each time that you enter a subversion command, you can create and use a [SSH key pair | http://www.puddingonline.com/~dave/publications/SSH-with-Keys-HOWTO/document/html-one-page/SSH-with-Keys-HOWTO.html] to authenticate your system.
* The repository is group readable/writeable for group "anw". If you do not belong to this group, you will not be able to access the repository. You can check this by using the command line tool "groups". Please talk to Sarah Osentoski if you are not in group "anw".
* There are subversion [clients | http://subversion.tigris.org/project_packages.html] available for many different operating systems, including [Macintosh OSX | http://metissian.com/projects/macosx/subversion/] and [Windows | http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91].

--=_multipart_boundary_16
Content-Type: application/x-phpwiki;
  pagename=Subversion;
  flags="";
  author=colinb;
  version=10;
  lastmodified=1125344541;
  author_id=colinb;
  markup=2;
  hits=42;
  charset=utf-8
Content-Transfer-Encoding: binary

!!! Subversion?

[Subversion | http://subversion.tigris.org] is open-source versioning software. The project is funded by [CollabNet | http://www.collab.net]. They hold the copyright to the code, but that copyright is [an Apache/BSD-style license | http://subversion.tigris.org/project_license.html] which is fully compliant with the [Debian Free Software Guidelines | http://www.debian.org/social_contract#guidelines].

Using versioning software to organize your coding projects will allow you to keep a record of every change ever made, work on the same code at different machines, and share your code with other members of the lab, and so it is highly recommended that you use Subversion for all of your coding projects.

A good starting point for learning how to use Subversion is this page. This page is especially important for ALL members, as all of the directions listed here are specific to you. The full guide to using Subversion can be found in [Version Control with Subversion | http://svnbook.red-bean.com/].

!!! Creating a Project

When creating a project, it is important to distinguish between a project group and a subproject, which belongs to one of the following project groups:
* motor_control
* imrl

!! Creating a Project Group

First create the tree structure for the new project group:

<verbatim>
  > mkdir mytree
  > mkdir mytree/trunk
  > mkdir mytree/tags
  > mkdir mytree/branches
</verbatim>

Then import the tree to the repository:

<verbatim>
  > svn import mytree svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfProjectGroup --mesage "Initial import"
</verbatim>

You can now delete the tree structure that you created:

<verbatim>
  > rm -r mytree
</verbatim>

And finally, add the name of the new project group to the list on this page.

!! Creating a Subproject

First make sure that you have the newest version of the project group to which your project belongs checked out:

<verbatim>
  > mkdir NameOfProjectGroup
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfProjectGroup/trunk NameOfProjectGroup
</verbatim>

or

<verbatim>
  > cd NameOfProjectGroup
  > svn update
</verbatim>

Next, create a directory for your subproject:

<verbatim>
  > mkdir NameOfProjectGroup/NameOfSubproject
</verbatim>

Then create all of the directories and files for the subproject within that directory, and add the subproject to the repository:

<verbatim>
  > cd NameOfProjectGroup
  > svn add NameOfSubproject
  > svn commit --message "Added subproject NameOfSubproject"
</verbatim>

Note that you only need to issue one "svn add" command, as "svn add" is recursive.

!!! Obtaining a Working Copy

To obtain a copy of all of the code for a main project:

<verbatim>
  > mkdir NameOfMainProject
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfMainProject/trunk NameOfProject
</verbatim>

To obtain a copy of all of the code for a subproject:

<verbatim>
  > mkdir NameOfMainProject
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfMainProject/trunk/NameOfSubproject NameOfMainProject
</verbatim>

!!! Updating Your Code

Before starting work on a project, it is a good idea to ensure that you have the most recent copy of the code:

<verbatim>
  > cd path/to/project
  > svn update
</verbatim>

!!! Changing Code

After ensuring that you have the most recent copy of the code, you can make changes to the code, either by altering existing files, creating new files or creating new directories. If you create a new file or a new directory within an existing project, make sure to add the file or directory to the repository:

<verbatim>
  > svn add path/to/file/or/directory
</verbatim>

You can also alter a project by deleting, copying or renaming a file or directory:

<verbatim>
  > svn delete path/to/file/or/directory
  > svn copy path/to/file/or/directory path/to/the/copy
  > svn move old/path/to/file/or/direcotry new/path/to/file/or/directory
</verbatim>

Please note that no changes will take effect until they are committed.

!!! Examining Changes

Before committing changes, it is a good idead to inspect what changes you have made. In this way, you can be sure to include accurate log messages. To see which files/directories have changed:

<verbatim>
  > svn status
</verbatim>

To see what changes have been made:

<verbatim>
  > svn diff
</verbatim>

To revert all changes in your working copy:

<verbatim>
  > svn revert
</verbatim>

Each of these commands can be applied to specific files/directories simply by adding the name of the file/directory as the last input parameter. Also, unlike most subversion commands, these three commands are not dependent on a working internet connection.

!!! Resolving Conflicts

If you are collaborating on a project with other members of the lab, you should always update your code with the "svn update" command before commiting your changes. Sometimes changes that you have made to your code will conflict with changes committed by another person working on the project. In this case, conflicting files will be marked by a trailing "C" during the update process. If this happens, you will need to resolve the conflict. When a conflict is recognized in a file ( e.g. file.txt), three new files will be created: file.txt.mine, file.txt.rOldRevisionNumber, file.rNewRevisionNumber. You can resolve conflicts by copying one of these files over the original file, by running "svn revert file.txt" or changes can be resolved by hand using a text editor and the original file. Having resolved changes:

<verbatim>
  > svn resolve path/to/file
</verbatim>

!!! Committing Changes

Having made changes to current code, and resolved all conflicts, you can commit the new version of the code to the repository:

<verbatim>
  > svn commit
</verbatim>

!!! Additional Information

* The subversion repository is located on entropy in the directory /nfs/entropy/u1/svn/repository.
* You can access the repository using the svn+ssh protocol, or the file protocol. Please use only the svn+ssh protocol, as the file protocol is not recommended for networked disks.
* You will need to use the same username/password as you do for logging in to ALL machines when accessing the repository.
* If you tire of typing your password each time that you enter a subversion command, you can create and use a [SSH key pair | http://www.puddingonline.com/~dave/publications/SSH-with-Keys-HOWTO/document/html-one-page/SSH-with-Keys-HOWTO.html] to authenticate your system.
* The repository is group readable/writeable for group "anw". If you do not belong to this group, you will not be able to access the repository. You can check this by using the command line tool "groups". Please talk to Sarah Osentoski if you are not in group "anw".
* There are subversion [clients | http://subversion.tigris.org/project_packages.html] available for many different operating systems, including [Macintosh OSX | http://metissian.com/projects/macosx/subversion/] and [Windows | http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91].

--=_multipart_boundary_16
Content-Type: application/x-phpwiki;
  pagename=Subversion;
  flags="";
  author=colinb;
  version=1;
  lastmodified=1125086688;
  author_id=colinb;
  markup=2;
  hits=42;
  charset=utf-8
Content-Transfer-Encoding: binary

!!! Subversion?

[Subversion | http://subversion.tigris.org] is open-source versioning software. The project is funded by [CollabNet | http://www.collab.net]. They hold the copyright to the code, but that copyright is [an Apache/BSD-style license | http://subversion.tigris.org/project_license.html] which is fully compliant with the [Debian Free Software Guidelines | http://www.debian.org/social_contract#guidelines].

Using versioning software to organize your coding projects will allow you to keep a record of every change ever made, work on the same code at different machines, and share your code with other members of the lab, and so it is highly recommended that you use Subversion for all of your coding projects.

A good starting point for learning how to use Subversion is this page. This page is especially important for ALL members, as all of the directions listed here are specific to you. The full guide to using Subversion can be found in [Version Control with Subversion | http://svnbook.red-bean.com/].

!!! Creating a Project

When creating a project, it is important to distinguish between a project group and a subproject, which belongs to one of the following project groups:
* motor_control
* imrl

!! Creating a Project Group

First create the tree structure for the new project group:

<verbatim>
  > mkdir mytree
  > mkdir mytree/trunk
  > mkdir mytree/tags
  > mkdir mytree/branches
</verbatim>

Then import the tree to the repository:

<verbatim>
  > svn import mytree svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfProjectGroup --mesage "Initial import"
</verbatim>

You can now delete the tree structure that you created:

<verbatim>
  > rm -r mytree
</verbatim>

And finally, add the name of the new project group to the list on this page.

!! Creating a Subproject

First make sure that you have the newest version of the project group to which your project belongs checked out:

<verbatim>
  > mkdir NameOfProjectGroup
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfProjectGroup/trunk NameOfProjectGroup
</verbatim>

or

<verbatim>
  > cd NameOfProjectGroup
  > svn update
</verbatim>

Next, create a directory for your subproject:

<verbatim>
  > mkdir NameOfProjectGroup/NameOfSubproject
</verbatim>

Then create all of the directories and files for the subproject within that directory, and add the subproject to the repository:

<verbatim>
  > cd NameOfProjectGroup
  > svn add NameOfSubproject
  > svn commit --message "Added subproject NameOfSubproject"
</verbatim>

Note that you only need to issue one "svn add" command, as "svn add" is recursive.

!!! Obtaining a Working Copy

To obtain a copy of all of the code for a main project:

<verbatim>
  > mkdir NameOfMainProject
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfMainProject/trunk NameOfProject
</verbatim>

To obtain a copy of all of the code for a subproject:

<verbatim>
  > mkdir NameOfMainProject
  > svn checkout svn+ssh://entropy.cs.umass.edu/nfs/entropy/u1/svn/repository/NameOfMainProject/trunk/NameOfSubproject NameOfMainProject
</verbatim>

!!! Updating Your Code

Before starting work on a project, it is a good idea to ensure that you have the most recent copy of the code:

<verbatim>
  > cd path/to/project
  > svn update
</verbatim>

!!! Changing Code

After ensuring that you have the most recent copy of the code, you can make changes to the code, either by altering existing files, creating new files or creating new directories. If you create a new file or a new directory within an existing project, make sure to add the file or directory to the repository:

<verbatim>
  > svn add path/to/file/or/directory
</verbatim>

You can also alter a project by deleting, copying or renaming a file or directory:

<verbatim>
  > svn delete path/to/file/or/directory
  > svn copy path/to/file/or/directory path/to/the/copy
  > svn move old/path/to/file/or/direcotry new/path/to/file/or/directory
</verbatim>

Please note that no changes will take effect until they are committed.

!!! Examining Changes

Before committing changes, it is a good idead to inspect what changes you have made. In this way, you can be sure to include accurate log messages. To see which files/directories have changed:

<verbatim>
  > svn status
</verbatim>

To see what changes have been made:

<verbatim>
  > svn diff
</verbatim>

To revert all changes in your working copy:

<verbatim>
  > svn revert
</verbatim>

Each of these commands can be applied to specific files/directories simply by adding the name of the file/directory as the last input parameter. Also, unlike most subversion commands, these three commands are not dependent on a working internet connection.

!!! Resolving Conflicts

If you are collaborating on a project with other members of the lab, you should always update your code with the "svn update" command before commiting your changes. Sometimes changes that you have made to your code will conflict with changes committed by another person working on the project. In this case, conflicting files will be marked by a trailing "C" during the update process. If this happens, you will need to resolve the conflict. When a conflict is recognized in a file ( e.g. file.txt), three new files will be created: file.txt.mine, file.txt.rOldRevisionNumber, file.rNewRevisionNumber. You can resolve conflicts by copying one of these files over the original file, by running "svn revert file.txt" or changes can be resolved by hand using a text editor and the original file. Having resolved changes:

<verbatim>
  > svn resolve path/to/file
</verbatim>

!!! Committing Changes

Having made changes to current code, and resolved all conflicts, you can commit the new version of the code to the repository:

<verbatim>
  > svn commit
</verbatim>

!!! Additional Information

* The subversion repository is located on entropy in the directory /nfs/entropy/u1/svn/repository.
* You can access the repository using the svn+ssh protocol, or the file protocol. Please use only the svn+ssh protocol, as the file protocol is not recommended for networked disks.
* You will need to use the same username/password as you do for logging in to ALL machines when accessing the repository.
* If you tire of typing your password each time that you enter a subversion command, you can create and use a [SSH key pair | http://www.puddingonline.com/~dave/publications/SSH-with-Keys-HOWTO/document/html-one-page/SSH-with-Keys-HOWTO.html] to authenticate your system.
* The repository is group readable/writeable for group "anw". If you do not belong to this group, you will not be able to access the repository. You can check this by using the command line tool "groups". Please talk to Sarah Osentoski if you are not in group "anw".
* There are subversion [clients available | http://subversion.tigris.org/project_packages.html] for many different operating systems, including [Macintosh OSX | http://metissian.com/projects/macosx/subversion/] and [Windows | http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91].

--=_multipart_boundary_16--
